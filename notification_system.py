#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
"""

import requests
import json
import asyncio
from typing import Dict, List, Optional, Callable
from datetime import datetime, timedelta
from dataclasses import dataclass
from time_monitor import TimeTrigger, TriggerType, UserSettings

@dataclass
class NotificationMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    chat_id: int
    text: str
    parse_mode: str = "HTML"
    reply_markup: Optional[Dict] = None
    priority: int = 1

class TelegramNotifier:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""

    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.api_url = f"https://api.telegram.org/bot{bot_token}"
        self.session = requests.Session()
        self.session.verify = False  # –î–ª—è —Ä–µ—à–µ–Ω–∏—è SSL –ø—Ä–æ–±–ª–µ–º

    def send_message(self, message: NotificationMessage) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            url = f"{self.api_url}/sendMessage"
            data = {
                "chat_id": message.chat_id,
                "text": message.text,
                "parse_mode": message.parse_mode
            }

            if message.reply_markup:
                data["reply_markup"] = json.dumps(message.reply_markup)

            response = self.session.post(url, json=data, timeout=10)

            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat_id}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {result.get('description')}")
                    return False
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

    def send_departure_reminder(self, chat_id: int, client_info: Dict, departure_time: datetime) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–µ–∑–¥–µ"""
        text = f"""
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–µ–∑–¥–µ</b>

üöó –ß–µ—Ä–µ–∑ 15 –º–∏–Ω –≤—ã–µ–∑–∂–∞–π—Ç–µ –∫ –∫–ª–∏–µ–Ω—Ç—É
üìç <b>–ê–¥—Ä–µ—Å:</b> {client_info.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_info.get('client_level', '–°—Ç–∞–Ω–¥–∞—Ä—Ç')}
‚è±Ô∏è <b>–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</b> {client_info.get('travel_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –º–∏–Ω
üïê <b>–í—ã–µ–∑–¥ –≤:</b> {departure_time.strftime('%H:%M')}
        """.strip()

        message = NotificationMessage(
            chat_id=chat_id,
            text=text,
            priority=2
        )

        return self.send_message(message)

    def send_lunch_reminder(self, chat_id: int, lunch_start: datetime, lunch_end: datetime) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–±–µ–¥–µ"""
        text = f"""
üçΩÔ∏è <b>–í—Ä–µ–º—è –æ–±–µ–¥–∞</b>

‚è∞ –í—Ä–µ–º—è –æ–±–µ–¥–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
üïê <b>–°:</b> {lunch_start.strftime('%H:%M')}
üïê <b>–î–æ:</b> {lunch_end.strftime('%H:%M')}
‚è±Ô∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 1 —á–∞—Å

üí° <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—á–µ—Å—Ç—å –≤—Ä–µ–º—è –æ–±–µ–¥–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞</i>
        """.strip()

        message = NotificationMessage(
            chat_id=chat_id,
            text=text,
            priority=2
        )

        return self.send_message(message)

    def send_delay_alert(self, chat_id: int, client_info: Dict, delay_minutes: int, planned_arrival: datetime) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏"""
        text = f"""
üö® <b>–û–ü–û–ó–î–ê–ù–ò–ï!</b>

‚ö†Ô∏è –í—ã –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç–µ –Ω–∞ <b>{delay_minutes} –º–∏–Ω</b> –∫ –∫–ª–∏–µ–Ω—Ç—É
üìç <b>–ê–¥—Ä–µ—Å:</b> {client_info.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_info.get('client_level', '–°—Ç–∞–Ω–¥–∞—Ä—Ç')}
üïê <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –ø—Ä–∏–±—ã—Ç–∏–µ:</b> {planned_arrival.strftime('%H:%M')}
üïê <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M')}

üí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏</i>
        """.strip()

        message = NotificationMessage(
            chat_id=chat_id,
            text=text,
            priority=1
        )

        return self.send_message(message)

    def send_traffic_alert(self, chat_id: int, route_info: Dict, time_increase: int, old_time: int, new_time: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        text = f"""
üöó <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞</b>

‚ö†Ô∏è –ü—Ä–æ–±–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ!
‚è±Ô∏è <b>–í—Ä–µ–º—è —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞:</b> {time_increase} –º–∏–Ω
üïê <b>–ë—ã–ª–æ:</b> {old_time} –º–∏–Ω
üïê <b>–°—Ç–∞–ª–æ:</b> {new_time} –º–∏–Ω
üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {route_info.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üí° <i>–ú–∞—Ä—à—Ä—É—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω</i>
        """.strip()

        message = NotificationMessage(
            chat_id=chat_id,
            text=text,
            priority=1
        )

        return self.send_message(message)

    def send_route_update(self, chat_id: int, route_info: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞"""
        text = f"""
üîÑ <b>–ú–∞—Ä—à—Ä—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω</b>

üìç <b>–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {route_info.get('user_location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìä <b>–ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –º–∞—Ä—à—Ä—É—Ç–µ:</b> {route_info.get('total_clients', 0)}
‚è±Ô∏è <b>–û–±—â–µ–µ –≤—Ä–µ–º—è:</b> {route_info.get('total_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üõ£Ô∏è <b>–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {route_info.get('total_distance', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üí° <i>–ú–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</i>
        """.strip()

        message = NotificationMessage(
            chat_id=chat_id,
            text=text,
            priority=2
        )

        return self.send_message(message)

    def send_client_arrival(self, chat_id: int, client_info: Dict, arrival_time: datetime) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É"""
        service_time = client_info.get('service_time', 20)
        client_level = client_info.get('client_level', '–°—Ç–∞–Ω–¥–∞—Ä—Ç')

        text = f"""
üìç <b>–ü—Ä–∏–±—ã—Ç–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç—É</b>

‚úÖ –í—ã –ø—Ä–∏–±—ã–ª–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É
üìç <b>–ê–¥—Ä–µ—Å:</b> {client_info.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_level}
‚è±Ô∏è <b>–í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</b> {service_time} –º–∏–Ω
üïê <b>–ü—Ä–∏–±—ã—Ç–∏–µ:</b> {arrival_time.strftime('%H:%M')}
üïê <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {(arrival_time + timedelta(minutes=service_time)).strftime('%H:%M')}

üí° <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ –ø–æ—Å–ª–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</i>
        """.strip()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
        reply_markup = {
            "inline_keyboard": [[
                {
                    "text": f"‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ",
                    "callback_data": f"visited_{client_info.get('id', 0)}"
                }
            ]]
        }

        message = NotificationMessage(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            priority=2
        )

        return self.send_message(message)

    def send_settings_menu(self, chat_id: int, settings: UserSettings) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        status_emoji = "‚úÖ" if settings.notifications_enabled else "‚ùå"

        text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {status_emoji} {'–í–∫–ª—é—á–µ–Ω—ã' if settings.notifications_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã'}
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ:</b> –∑–∞ {settings.departure_reminder_minutes} –º–∏–Ω
üçΩÔ∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–µ–¥–µ:</b> –∑–∞ {settings.lunch_reminder_minutes} –º–∏–Ω
üö® <b>–û–ø–æ–∑–¥–∞–Ω–∏—è:</b> –æ—Ç {settings.delay_threshold_minutes} –º–∏–Ω
üöó <b>–¢—Ä–∞—Ñ–∏–∫:</b> –æ—Ç {settings.traffic_threshold_minutes} –º–∏–Ω
üïê <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> {settings.work_start}-{settings.work_end}
üçΩÔ∏è <b>–û–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> {settings.lunch_start}-{settings.lunch_end}
üåç <b>–Ø–∑—ã–∫:</b> {settings.language}
        """.strip()

        reply_markup = {
            "inline_keyboard": [
                [
                    {"text": "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "callback_data": "settings_notifications"},
                    {"text": "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "callback_data": "settings_reminders"}
                ],
                [
                    {"text": "üöó –¢—Ä–∞—Ñ–∏–∫", "callback_data": "settings_traffic"},
                    {"text": "üïê –í—Ä–µ–º—è", "callback_data": "settings_time"}
                ],
                [
                    {"text": "üåç –Ø–∑—ã–∫", "callback_data": "settings_language"},
                    {"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "callback_data": "settings_close"}
                ]
            ]
        }

        message = NotificationMessage(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            priority=3
        )

        return self.send_message(message)

    def send_help_message(self, chat_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        text = """
ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–º:</b>
/next - –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
/visited <id> - –û—Ç–º–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ
/location <–∞–¥—Ä–µ—Å> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
/notifications on/off - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å
/remind <–º–∏–Ω—É—Ç—ã> - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ N –º–∏–Ω—É—Ç
/traffic <–º–∏–Ω—É—Ç—ã> - –¢—Ä–∞—Ñ–∏–∫ –æ—Ç N –º–∏–Ω—É—Ç
/delay <–º–∏–Ω—É—Ç—ã> - –û–ø–æ–∑–¥–∞–Ω–∏—è –æ—Ç N –º–∏–Ω—É—Ç

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/remind 15 - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç
/traffic 10 - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ –æ—Ç 10 –º–∏–Ω—É—Ç
/visited 5 - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ 5 –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ
        """.strip()

        message = NotificationMessage(
            chat_id=chat_id,
            text=text,
            priority=3
        )

        return self.send_message(message)

class NotificationSystem:
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, bot_token: str):
        self.notifier = TelegramNotifier(bot_token)
        self.user_settings: Dict[int, UserSettings] = {}

    def register_user(self, chat_id: int, settings: UserSettings):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.user_settings[chat_id] = settings
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    def handle_trigger(self, trigger: TimeTrigger):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        chat_id = trigger.data.get("chat_id")
        if not chat_id or chat_id not in self.user_settings:
            return

        settings = self.user_settings[chat_id]
        if not settings.notifications_enabled:
            return

        success = False

        if trigger.trigger_type == TriggerType.DEPARTURE_REMINDER:
            success = self.notifier.send_departure_reminder(
                chat_id,
                trigger.data["client_info"],
                trigger.data["departure_time"]
            )
        elif trigger.trigger_type == TriggerType.LUNCH_BREAK:
            success = self.notifier.send_lunch_reminder(
                chat_id,
                trigger.data["lunch_start"],
                trigger.data["lunch_end"]
            )
        elif trigger.trigger_type == TriggerType.DELAY_ALERT:
            success = self.notifier.send_delay_alert(
                chat_id,
                trigger.data["client_info"],
                trigger.data["delay_minutes"],
                trigger.data["planned_arrival"]
            )
        elif trigger.trigger_type == TriggerType.TRAFFIC_CHANGE:
            success = self.notifier.send_traffic_alert(
                chat_id,
                trigger.data["route_info"],
                trigger.data["time_increase"],
                trigger.data["old_time"],
                trigger.data["new_time"]
            )
        elif trigger.trigger_type == TriggerType.ROUTE_UPDATE:
            success = self.notifier.send_route_update(
                chat_id,
                trigger.data["route_info"]
            )
        elif trigger.trigger_type == TriggerType.CLIENT_ARRIVAL:
            success = self.notifier.send_client_arrival(
                chat_id,
                trigger.data["client_info"],
                trigger.data["arrival_time"]
            )

        if success:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {trigger.trigger_type.value} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {trigger.trigger_type.value} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

    def send_manual_notification(self, chat_id: int, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä—É—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        message = NotificationMessage(
            chat_id=chat_id,
            text=text,
            priority=3
        )
        return self.notifier.send_message(message)

    def get_user_settings(self, chat_id: int) -> Optional[UserSettings]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_settings.get(chat_id)

    def update_user_settings(self, chat_id: int, **kwargs):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if chat_id in self.user_settings:
            for key, value in kwargs.items():
                if hasattr(self.user_settings[chat_id], key):
                    setattr(self.user_settings[chat_id], key, value)
            print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 60)

    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN")
        return

    notification_system = NotificationSystem(BOT_TOKEN)

    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_chat_id = 123456789
    test_settings = UserSettings(
        chat_id=test_chat_id,
        notifications_enabled=True,
        departure_reminder_minutes=15,
        lunch_reminder_minutes=15,
        delay_threshold_minutes=5,
        traffic_threshold_minutes=10
    )

    notification_system.register_user(test_chat_id, test_settings)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    print("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")

    # –¢–µ—Å—Ç 1: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–µ–∑–¥–µ
    client_info = {
        "id": 1,
        "address": "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É, —É–ª. –ë–æ–ª—å—à–∞—è –°–∞–¥–æ–≤–∞—è, 1",
        "client_level": "VIP",
        "travel_time": 20
    }

    success = notification_system.notifier.send_departure_reminder(
        test_chat_id,
        client_info,
        datetime.now() + timedelta(minutes=15)
    )

    if success:
        print("‚úÖ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ –Ω–µ –ø—Ä–æ—à–µ–ª")

    # –¢–µ—Å—Ç 2: –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    success = notification_system.notifier.send_settings_menu(test_chat_id, test_settings)

    if success:
        print("‚úÖ –¢–µ—Å—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –¢–µ—Å—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª")

    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
