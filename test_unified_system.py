#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ANN + TomTom API + –≥—Ä–∞—Ñ –º–∞—Ä—à—Ä—É—Ç–æ–≤
"""

import os
import json
import pandas as pd
from unified_route_system import UnifiedRouteSystem, Client, ClientLevel

class SystemTester:
    """–¢–µ—Å—Ç–µ—Ä –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤"""

    def __init__(self):
        self.system = UnifiedRouteSystem(tomtom_api_key="4Me4kS17IKSfQmvDuIgLpsz9jxAu6tt2")
        print("üß™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã...")

    def load_test_clients(self, data_file: str = "DATA (2).txt"):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ {data_file}...")

        if not os.path.exists(data_file):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_file}")
            return []

        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç
            with open(data_file, 'r', encoding='utf-8') as f:
                content = f.read()

            # –ü–∞—Ä—Å–∏–º JSON-–ø–æ–¥–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            clients = self._parse_client_data(content)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(clients)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            return clients

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
            return []

    def _parse_client_data(self, content: str):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        import re

        try:
            # –ò—â–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
            data_match = re.search(r'data = \[(.*?)\]', content, re.DOTALL)
            if not data_match:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö")
                return []

            data_str = data_match.group(1)

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            objects = []
            current_obj = ""
            brace_count = 0

            for char in data_str:
                if char == '{':
                    brace_count += 1
                elif char == '}':
                    brace_count -= 1

                current_obj += char

                if brace_count == 0 and current_obj.strip():
                    obj_str = current_obj.strip()
                    if obj_str.startswith('{') and obj_str.endswith('}'):
                        objects.append(obj_str)
                    current_obj = ""

            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç
            clients = []
            for i, obj_str in enumerate(objects):
                try:
                    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    obj_str = obj_str.strip()
                    if obj_str.endswith(','):
                        obj_str = obj_str[:-1]

                    # –ü–∞—Ä—Å–∏–º JSON
                    client_data = json.loads(obj_str)

                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Client
                    client = Client(
                        id=int(client_data.get('id', i+1)),
                        address=str(client_data.get('address1', '')),
                        lat=float(client_data.get('lat', 47.2225)),  # –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        lon=float(client_data.get('lon', 39.7203)),
                        client_level=ClientLevel.VIP if client_data.get('client_level') == 'VIP' else ClientLevel.REGULAR,
                        work_start=str(client_data.get('work_start', '09:00')),
                        work_end=str(client_data.get('work_end', '18:00')),
                        lunch_start=str(client_data.get('lunch_start', '13:00')),
                        lunch_end=str(client_data.get('lunch_end', '14:00'))
                    )

                    clients.append(client)

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞ {i+1}: {e}")
                    continue

            return clients

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

    def test_route_optimization(self, clients, num_days: int = 3):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        print(f"\nüó∫Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ {num_days} –¥–Ω–µ–π...")

        if not clients:
            print("‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return None

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        try:
            result = self.system.get_unified_route(clients, num_days)

            if result['success']:
                print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã!")
                self._print_route_analysis(result)
                return result
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤")
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return None

    def _print_route_analysis(self, result):
        """–í—ã–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –ú–ê–†–®–†–£–¢–û–í:")
        print("=" * 60)

        total_clients = result['total_clients']
        num_days = result['num_days']

        print(f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}")
        print(f"üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {num_days}")
        print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å: {total_clients / num_days:.1f}")

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º
        for route in result['routes']:
            day = route['day']
            clients_count = len(route['clients'])
            vip_count = sum(1 for wp in route['waypoints'] if wp['level'] == 'VIP')
            standard_count = clients_count - vip_count

            print(f"\nüìÖ –î–µ–Ω—å {day}:")
            print(f"   üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}")
            print(f"   üåü VIP: {vip_count} –∏–∑ {clients_count}")
            print(f"   üë§ –°—Ç–∞–Ω–¥–∞—Ä—Ç: {standard_count} –∏–∑ {clients_count}")
            print(f"   üß† ANN –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: {route['ann_optimized']}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–ª–∏–µ–Ω—Ç–∞
            if route['waypoints']:
                print(f"   üöÄ –ù–∞—á–∞–ª–æ: {route['waypoints'][0]['id']} ({route['waypoints'][0]['level']})")
                if len(route['waypoints']) > 1:
                    print(f"   üèÅ –§–∏–Ω–∏—à: {route['waypoints'][-1]['id']} ({route['waypoints'][-1]['level']})")

    def test_ann_predictions(self, clients):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ANN –º–æ–¥–µ–ª–∏ –Ω–∞ –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–∞—Ö"""
        print(f"\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π ANN –º–æ–¥–µ–ª–∏ –Ω–∞ –í–°–ï–• {len(clients)} –∫–ª–∏–µ–Ω—Ç–∞—Ö...")

        if len(clients) < 2:
            print("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –í–°–ï–• {len(clients)} –∫–ª–∏–µ–Ω—Ç–∞—Ö...")

        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç —Å –ø–æ–º–æ—â—å—é ANN –¥–ª—è –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤
            optimized_clients = self.system.optimize_route_with_ann(clients)

            print("‚úÖ ANN –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤!")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("\nüìà –ê–ù–ê–õ–ò–ó ANN –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò (–í–°–ï –ö–õ–ò–ï–ù–¢–´):")
            print("-" * 60)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–ª–∏–µ–Ω—Ç–æ–≤
            print("üöÄ –ü–ï–†–í–´–ï 10 –ö–õ–ò–ï–ù–¢–û–í:")
            for i, client in enumerate(optimized_clients[:10]):
                vip_status = "üåü VIP" if client.client_level == ClientLevel.VIP else "üë§ –°—Ç–∞–Ω–¥–∞—Ä—Ç"
                print(f"{i+1:2d}. ID: {client.id} - {vip_status}")

            if len(optimized_clients) > 10:
                print(f"\n... (–ø—Ä–æ–ø—É—â–µ–Ω–æ {len(optimized_clients) - 15} –∫–ª–∏–µ–Ω—Ç–æ–≤) ...")
                print("\nüèÅ –ü–û–°–õ–ï–î–ù–ò–ï 5 –ö–õ–ò–ï–ù–¢–û–í:")
                for i, client in enumerate(optimized_clients[-5:], len(optimized_clients)-4):
                    vip_status = "üåü VIP" if client.client_level == ClientLevel.VIP else "üë§ –°—Ç–∞–Ω–¥–∞—Ä—Ç"
                    print(f"{i:2d}. ID: {client.id} - {vip_status}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            vip_positions = [i for i, c in enumerate(optimized_clients) if c.client_level == ClientLevel.VIP]
            if vip_positions:
                avg_vip_position = sum(vip_positions) / len(vip_positions)
                print(f"\nüåü VIP –∫–ª–∏–µ–Ω—Ç—ã –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {avg_vip_position:.1f}")
                print(f"üåü –í—Å–µ–≥–æ VIP –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(vip_positions)}")
                print("‚úÖ ANN –º–æ–¥–µ–ª—å —É—á–∏—Ç—ã–≤–∞–µ—Ç VIP –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!")
            else:
                print("‚ÑπÔ∏è –ù–µ—Ç VIP –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–µ")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_vip = sum(1 for c in optimized_clients if c.client_level == ClientLevel.VIP)
            total_standard = len(optimized_clients) - total_vip
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   üåü VIP –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_vip}")
            print(f"   üë§ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö: {total_standard}")
            print(f"   üìä –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(optimized_clients)}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ANN: {e}")
            import traceback
            traceback.print_exc()

    def test_tomtom_integration(self, clients):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å TomTom API –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–∞—Ö"""
        print(f"\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TomTom API...")

        if len(clients) < 4:
            print("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        test_routes = [
            (clients[0], clients[1]),  # –ü–µ—Ä–≤—ã–π ‚Üí –í—Ç–æ—Ä–æ–π
            (clients[1], clients[2]),  # –í—Ç–æ—Ä–æ–π ‚Üí –¢—Ä–µ—Ç–∏–π
            (clients[0], clients[3])    # –ü–µ—Ä–≤—ã–π ‚Üí –ß–µ—Ç–≤–µ—Ä—Ç—ã–π
        ]

        successful_routes = 0
        total_distance = 0
        total_time = 0

        for i, (client1, client2) in enumerate(test_routes, 1):
            print(f"üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç {i}: {client1.id} ‚Üí {client2.id}")

            try:
                # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç TomTom
                tomtom_result = self.system.get_tomtom_route(client1, client2)

                if 'error' in tomtom_result:
                    print(f"‚ùå TomTom API –æ—à–∏–±–∫–∞: {tomtom_result['error']}")
                else:
                    print("‚úÖ TomTom API —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª –º–∞—Ä—à—Ä—É—Ç!")

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if 'routes' in tomtom_result and tomtom_result['routes']:
                        route = tomtom_result['routes'][0]
                        summary = route.get('summary', {})

                        distance = summary.get('lengthInMeters', 0) / 1000  # –∫–º
                        duration = summary.get('travelTimeInSeconds', 0) / 60  # –º–∏–Ω—É—Ç—ã

                        print(f"   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º")
                        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: {duration:.1f} –º–∏–Ω")
                        print(f"   üö¶ –£—á–µ—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {summary.get('trafficDelayInSeconds', 0)} —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫–∏")

                        successful_routes += 1
                        total_distance += distance
                        total_time += duration
                    else:
                        print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä—à—Ä—É—Ç–µ –≤ –æ—Ç–≤–µ—Ç–µ TomTom")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ TomTom API: {e}")

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê TOMTOM API:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {successful_routes}/{len(test_routes)}")
        if successful_routes > 0:
            print(f"   üìè –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {total_distance/successful_routes:.2f} –∫–º")
            print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {total_time/successful_routes:.1f} –º–∏–Ω")
            print("‚úÖ TomTom API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
        else:
            print("‚ùå TomTom API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False

    def test_dynamic_recalculation(self, clients):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ"""
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞...")

        if len(clients) < 3:
            print("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            test_clients = clients[:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 5 –∫–ª–∏–µ–Ω—Ç–æ–≤

            print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_clients)} –∫–ª–∏–µ–Ω—Ç–∞—Ö...")

            # 1. –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è)
            print("\n1Ô∏è‚É£ –û—Ç–º–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ 1 –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è):")
            result1 = self.system.mark_client_visited(test_clients[0].id)
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result1['message']}")
            print(f"   ‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {result1['current_time']:.2f} —á–∞—Å–æ–≤")
            print(f"   üë• –ü–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(result1['visited_clients'])}")

            # 2. –û—Ç–º–µ—á–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (VIP, 30 –º–∏–Ω—É—Ç)
            print("\n2Ô∏è‚É£ –û—Ç–º–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ 2 –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ (VIP, 30 –º–∏–Ω):")
            result2 = self.system.mark_client_visited(test_clients[1].id, actual_service_time=30.0)
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result2['message']}")
            print(f"   ‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {result2['current_time']:.2f} —á–∞—Å–æ–≤")
            print(f"   üë• –ü–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(result2['visited_clients'])}")

            # 3. –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ—Ç—å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (—Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, 15 –º–∏–Ω—É—Ç)
            print("\n3Ô∏è‚É£ –û—Ç–º–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ 3 –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ (—Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, 15 –º–∏–Ω):")
            result3 = self.system.mark_client_visited(test_clients[2].id, actual_service_time=15.0)
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result3['message']}")
            print(f"   ‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {result3['current_time']:.2f} —á–∞—Å–æ–≤")
            print(f"   üë• –ü–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(result3['visited_clients'])}")

            # 4. –û—Ç–º–µ—á–∞–µ–º —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏, 45 –º–∏–Ω—É—Ç)
            print("\n4Ô∏è‚É£ –û—Ç–º–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ 4 –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ (–ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏, 45 –º–∏–Ω):")
            result4 = self.system.mark_client_visited(test_clients[3].id, actual_service_time=45.0)
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result4['message']}")
            print(f"   ‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {result4['current_time']:.2f} —á–∞—Å–æ–≤")
            print(f"   üë• –ü–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(result4['visited_clients'])}")

            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print(f"\nüìä –ê–ù–ê–õ–ò–ó –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–†–ê–°–ß–ï–¢–ê:")
            print(f"   üïê –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 9.00 —á–∞—Å–æ–≤")
            print(f"   üïê –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {result4['current_time']:.2f} —á–∞—Å–æ–≤")
            print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {result4['current_time'] - 9.0:.2f} —á–∞—Å–æ–≤")
            print(f"   üë• –ü–æ—Å–µ—â–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(result4['visited_clients'])}")
            print(f"   üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {(result4['current_time'] - 9.0) / len(result4['visited_clients']):.2f} —á–∞—Å–æ–≤")

            print("‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            return False

    def test_location_detection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\nüìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...")

        try:
            # –¢–µ—Å—Ç 1: GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            print("\n1Ô∏è‚É£ –¢–µ—Å—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
            gps_result = self.system.set_user_location(gps_coords=(47.2225, 39.7203))
            if gps_result['success']:
                print(f"   ‚úÖ GPS: {gps_result['location']['address']}")
                print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {gps_result['location']['accuracy']}–º")
            else:
                print(f"   ‚ùå GPS –æ—à–∏–±–∫–∞: {gps_result['message']}")

            # –¢–µ—Å—Ç 2: IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
            print("\n2Ô∏è‚É£ –¢–µ—Å—Ç IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:")
            ip_result = self.system.set_user_location(ip_address="8.8.8.8")
            if ip_result['success']:
                print(f"   ‚úÖ IP: {ip_result['location']['address']}")
                print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {ip_result['location']['accuracy']}–º")
            else:
                print(f"   ‚ùå IP –æ—à–∏–±–∫–∞: {ip_result['message']}")

            # –¢–µ—Å—Ç 3: –ê–¥—Ä–µ—Å–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∞–¥—Ä–µ—Å–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
            address_result = self.system.set_user_location(manual_address="–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É, –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
            if address_result['success']:
                print(f"   ‚úÖ –ê–¥—Ä–µ—Å: {address_result['location']['address']}")
                print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {address_result['location']['accuracy']}–º")
            else:
                print(f"   ‚ùå –ê–¥—Ä–µ—Å –æ—à–∏–±–∫–∞: {address_result['message']}")

            # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:")
            current_location = self.system.get_user_location()
            if current_location['success']:
                print(f"   ‚úÖ –¢–µ–∫—É—â–µ–µ: {current_location['location']['address']}")
                print(f"   üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {current_location['location']['source']}")
            else:
                print(f"   ‚ùå –ù–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {current_location['message']}")

            print("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return False

    def test_dynamic_location_change(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        print(f"\nüó∫Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...")

        try:
            # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            print("\n1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:")
            initial_result = self.system.set_user_location(gps_coords=(47.2225, 39.7203))
            if initial_result['success']:
                print(f"   ‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ: {initial_result['location']['address']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {initial_result['message']}")
                return False

            # 2. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ç–∞—â–∏–ª –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ)
            print("\n2Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ):")
            new_coords = (47.2500, 39.7500)  # –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            update_result = self.system.update_user_location(new_coords[0], new_coords[1])
            if update_result['success']:
                print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_result['new_location']['address']}")
                print(f"   üìç –°—Ç–∞—Ä–æ–µ: {update_result['old_location']['address']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_result['message']}")
                return False

            # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∞–¥—Ä–µ—Å–æ–≤
            print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:")
            suggestions_result = self.system.get_location_suggestions("–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", limit=3)
            if suggestions_result['success']:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(suggestions_result['suggestions'])} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:")
                for i, suggestion in enumerate(suggestions_result['suggestions'][:3], 1):
                    print(f"      {i}. {suggestion['display_name']}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {suggestions_result['message']}")

            # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            clients = self.system.load_clients_from_file("DATA (2).txt")
            if clients:
                recalc_result = self.system.recalculate_routes_from_new_location(clients[:5], 2)
                if recalc_result['success']:
                    print(f"   ‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —Å –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")
                    print(f"   üìä –î–Ω–µ–π: {len(recalc_result['routes']['routes'])}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞: {recalc_result['message']}")
            else:
                print("   ‚ö†Ô∏è –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:")
            current_location = self.system.get_user_location()
            if current_location['success']:
                print(f"   ‚úÖ –¢–µ–∫—É—â–µ–µ: {current_location['location']['address']}")
                print(f"   üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {current_location['location']['source']}")
            else:
                print(f"   ‚ùå –ù–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {current_location['message']}")

            print("‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return False

    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–î–ò–ù–û–ô –°–ò–°–¢–ï–ú–´")
        print("=" * 60)

        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients = self.load_test_clients()
        if not clients:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º ANN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        self.test_ann_predictions(clients)

        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º TomTom –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        self.test_tomtom_integration(clients)

        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–æ–≤
        route_result = self.test_route_optimization(clients, num_days=3)

        # 5. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤ JSON –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        if route_result and route_result['success']:
            json_file = self.system.export_routes_to_json(route_result, "frontend_routes.json")
            if json_file:
                print(f"üìÑ JSON —Ñ–∞–π–ª –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {json_file}")

        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        location_result = self.test_location_detection()

        # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        dynamic_location_result = self.test_dynamic_location_change()

        # 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç
        dynamic_result = self.test_dynamic_recalculation(clients)

        # 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\nüéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)

        if route_result and route_result['success'] and dynamic_result:
            print("‚úÖ –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ ANN –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã")
            print("‚úÖ TomTom API –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
            print("‚úÖ –ì—Ä–∞—Ñ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
            print("üí° –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = SystemTester()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    tester.run_full_test()

    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
