"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏–∑ NYC –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç trip_distance, taxi_zone_geo –∏ TomTom API
"""

import pandas as pd
import numpy as np
import json
import requests
from typing import Dict, List, Tuple, Optional
import os
import time
from math import radians, cos, sin, asin, sqrt
import pickle

class RealDistanceAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏–∑ NYC –¥–∞–Ω–Ω—ã—Ö
    """

    def __init__(self, tomtom_api_key: str = None):
        self.tomtom_api_key = tomtom_api_key
        self.zone_coordinates = {}
        self.distance_matrix = {}
        self.trip_data = []

    def load_nyc_trip_data(self, file_path: str = "DS/original_cleaned_nyc_taxi_data_2018.csv") -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–µ–∑–¥–∫–∞—Ö –∏–∑ NYC
        """
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ NYC –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–µ–∑–¥–∫–∞—Ö...")

        try:
            # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            columns = [
                'trip_distance', 'pickup_location_id', 'dropoff_location_id',
                'trip_duration', 'fare_amount', 'hour_of_day'
            ]

            df = pd.read_csv(file_path, usecols=columns)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            df = df.dropna()
            df = df[df['trip_distance'] > 0]
            df = df[df['trip_duration'] > 0]

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫")
            return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NYC –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()

    def load_zone_geometries(self, file_path: str = "DS/taxi_zone_geo.csv") -> Dict:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∑–æ–Ω –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –∏—Ö —Ü–µ–Ω—Ç—Ä—ã
        """
        print("üó∫Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–π –∑–æ–Ω...")

        try:
            df = pd.read_csv(file_path)
            zone_coords = {}

            for _, row in df.iterrows():
                zone_id = row['zone_id']
                zone_name = row['zone_name']
                borough = row['borough']

                # –ü–∞—Ä—Å–∏–º –≥–µ–æ–º–µ—Ç—Ä–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É)
                geom_str = row['zone_geom']
                if 'POLYGON' in geom_str:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ POLYGON
                        coords_str = geom_str.split('POLYGON((')[1].split('))')[0]
                        coords = coords_str.split(', ')

                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –∫–∞–∫ —Ü–µ–Ω—Ç—Ä
                        if coords:
                            first_coord = coords[0].strip().split()
                            if len(first_coord) >= 2:
                                # –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ –ø–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                                lon_str = first_coord[0].replace('(', '').replace(')', '')
                                lat_str = first_coord[1].replace('(', '').replace(')', '')

                                lon = float(lon_str)
                                lat = float(lat_str)

                                zone_coords[zone_id] = {
                                    'lat': lat,
                                    'lon': lon,
                                    'name': zone_name,
                                    'borough': borough
                                }
                    except (ValueError, IndexError) as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–æ–Ω—ã {zone_id}: {e}")
                        continue

            self.zone_coordinates = zone_coords
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(zone_coords)} –∑–æ–Ω —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
            return zone_coords

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–π –∑–æ–Ω: {e}")
            return {}

    def calculate_haversine_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ Haversine
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä–∞–¥–∏–∞–Ω—ã
        lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])

        # –§–æ—Ä–º—É–ª–∞ Haversine
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
        c = 2 * asin(sqrt(a))

        # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        r = 6371000
        return c * r

    def build_distance_matrix(self) -> Dict:
        """
        –°—Ç—Ä–æ–∏—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∑–æ–Ω–∞–º–∏
        """
        print("üìè –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏...")

        if not self.zone_coordinates:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∑–æ–Ω")
            return {}

        distance_matrix = {}
        zones = list(self.zone_coordinates.keys())

        for i, zone1 in enumerate(zones):
            distance_matrix[zone1] = {}
            coord1 = self.zone_coordinates[zone1]

            for j, zone2 in enumerate(zones):
                coord2 = self.zone_coordinates[zone2]

                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                distance = self.calculate_haversine_distance(
                    coord1['lat'], coord1['lon'],
                    coord2['lat'], coord2['lon']
                )

                distance_matrix[zone1][zone2] = distance

                if (i * len(zones) + j) % 1000 == 0:
                    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i * len(zones) + j + 1}/{len(zones)**2} –ø–∞—Ä –∑–æ–Ω")

        self.distance_matrix = distance_matrix
        print(f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è {len(zones)} –∑–æ–Ω")
        return distance_matrix

    def get_real_distance_from_nyc(self, pickup_zone: int, dropoff_zone: int,
                                  trip_data: pd.DataFrame) -> Optional[float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ NYC –¥–∞–Ω–Ω—ã—Ö
        """
        # –ò—â–µ–º –ø–æ–µ–∑–¥–∫–∏ –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –∑–æ–Ω–∞–º–∏
        trips = trip_data[
            (trip_data['pickup_location_id'] == pickup_zone) &
            (trip_data['dropoff_location_id'] == dropoff_zone)
        ]

        if len(trips) > 0:
            # –ë–µ—Ä–µ–º –º–µ–¥–∏–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            median_distance = trips['trip_distance'].median()
            return median_distance * 1609.34  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–ª–∏ –≤ –º–µ—Ç—Ä—ã

        return None

    def get_distance_from_matrix(self, pickup_zone: int, dropoff_zone: int) -> Optional[float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        """
        if pickup_zone in self.distance_matrix and dropoff_zone in self.distance_matrix[pickup_zone]:
            return self.distance_matrix[pickup_zone][dropoff_zone]
        return None

    def get_tomtom_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> Optional[float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ TomTom API —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        """
        if not self.tomtom_api_key:
            return None

        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            session = requests.Session()
            session.verify = False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –∫–∞–∫ –ø–æ–∫–∞–∑–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json',
                'Connection': 'keep-alive'
            })

            url = "https://api.tomtom.com/routing/1/calculateRoute/{lat1},{lon1}:{lat2},{lon2}/json"
            url = url.format(lat1=lat1, lon1=lon1, lat2=lat2, lon2=lon2)

            params = {
                'key': self.tomtom_api_key,
                'routeType': 'fastest',
                'traffic': 'true'
            }

            response = session.get(url, params=params, timeout=30)

            if response.status_code == 200:
                data = response.json()
                if 'routes' in data and len(data['routes']) > 0:
                    route = data['routes'][0]
                    if 'summary' in route:
                        distance = route['summary']['lengthInMeters']
                        return distance

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ TomTom API: {e}")

        return None

    def get_optimal_distance(self, pickup_zone: int, dropoff_zone: int,
                           trip_data: pd.DataFrame, use_rostov_scaling: bool = True) -> float:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        """
        # 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ NYC –¥–∞–Ω–Ω—ã—Ö (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π)
        nyc_distance = self.get_real_distance_from_nyc(pickup_zone, dropoff_zone, trip_data)
        if nyc_distance:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –†–æ—Å—Ç–æ–≤ (NYC —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ–±—ã—á–Ω–æ –±–æ–ª—å—à–µ)
            if use_rostov_scaling:
                nyc_distance = nyc_distance * 0.6  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–¥ –†–æ—Å—Ç–æ–≤
            return nyc_distance

        # 2. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        matrix_distance = self.get_distance_from_matrix(pickup_zone, dropoff_zone)
        if matrix_distance:
            return matrix_distance

        # 3. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ TomTom API (–¥–ª—è –†–æ—Å—Ç–æ–≤–∞)
        if pickup_zone in self.zone_coordinates and dropoff_zone in self.zone_coordinates:
            coord1 = self.zone_coordinates[pickup_zone]
            coord2 = self.zone_coordinates[dropoff_zone]

            tomtom_distance = self.get_tomtom_distance(
                coord1['lat'], coord1['lon'],
                coord2['lat'], coord2['lon']
            )
            if tomtom_distance:
                return tomtom_distance

        # 4. Fallback - –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ –ø—Ä—è–º–æ–π
        if pickup_zone in self.zone_coordinates and dropoff_zone in self.zone_coordinates:
            coord1 = self.zone_coordinates[pickup_zone]
            coord2 = self.zone_coordinates[dropoff_zone]

            return self.calculate_haversine_distance(
                coord1['lat'], coord1['lon'],
                coord2['lat'], coord2['lon']
            )

        # 5. –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –†–æ—Å—Ç–æ–≤–∞
        return np.random.uniform(500, 5000)  # 0.5-5 –∫–º –¥–ª—è –†–æ—Å—Ç–æ–≤–∞

    def analyze_distance_patterns(self, trip_data: pd.DataFrame) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö
        """
        print("üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π...")

        analysis = {
            'total_trips': len(trip_data),
            'avg_distance': trip_data['trip_distance'].mean(),
            'median_distance': trip_data['trip_distance'].median(),
            'max_distance': trip_data['trip_distance'].max(),
            'min_distance': trip_data['trip_distance'].min(),
            'distance_std': trip_data['trip_distance'].std(),
            'avg_duration': trip_data['trip_duration'].mean(),
            'median_duration': trip_data['trip_duration'].median()
        }

        # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
        hourly_stats = trip_data.groupby('hour_of_day').agg({
            'trip_distance': ['mean', 'median', 'count'],
            'trip_duration': ['mean', 'median']
        }).round(2)

        analysis['hourly_stats'] = hourly_stats

        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"  üìè –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {analysis['avg_distance']:.2f} –º–∏–ª—å")
        print(f"  ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {analysis['avg_duration']:.0f} —Å–µ–∫—É–Ω–¥")
        print(f"  üìä –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {analysis['total_trips']}")

        return analysis

    def save_distance_matrix(self, file_path: str = "distance_matrix.pkl"):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –≤ —Ñ–∞–π–ª
        """
        if self.distance_matrix:
            with open(file_path, 'wb') as f:
                pickle.dump(self.distance_matrix, f)
            print(f"üíæ –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {file_path}")

    def load_distance_matrix(self, file_path: str = "distance_matrix.pkl"):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
        """
        try:
            with open(file_path, 'rb') as f:
                self.distance_matrix = pickle.load(f)
            print(f"üìÇ –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {file_path}")
        except FileNotFoundError:
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã: {e}")

    def get_rostov_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–æ—Å—Ç–æ–≤—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        """
        # 1. –ü—Ä–æ–±—É–µ–º TomTom API –¥–ª—è –†–æ—Å—Ç–æ–≤–∞
        if self.tomtom_api_key:
            tomtom_distance = self.get_tomtom_distance(lat1, lon1, lat2, lon2)
            if tomtom_distance:
                return tomtom_distance

        # 2. Fallback - –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ –ø—Ä—è–º–æ–π
        return self.calculate_haversine_distance(lat1, lon1, lat2, lon2)

    def create_rostov_training_data(self, clients_data: List[Dict],
                                 use_nyc_patterns: bool = True,
                                 num_synthetic_clients: int = 100) -> List[Dict]:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å —Ä–æ—Å—Ç–æ–≤—Å–∫–∏–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
        """
        print("üèôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å —Ä–æ—Å—Ç–æ–≤—Å–∫–∏–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏...")
        print(f"üìä –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients_data)}")
        print(f"üéØ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø–∞—Ä: {len(clients_data) * (len(clients_data) - 1)}")
        print(f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {len(clients_data) * (len(clients_data) - 1) * 2 // 60} –º–∏–Ω—É—Ç")

        training_data = []
        total_pairs = len(clients_data) * (len(clients_data) - 1)
        processed_pairs = 0

        # 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–æ—Å—Ç–æ–≤—Å–∫–∏–µ –∫–ª–∏–µ–Ω—Ç—ã
        for i, client1 in enumerate(clients_data):
            for j, client2 in enumerate(clients_data):
                if i != j:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø–∞—Ä
                    if processed_pairs % 50 == 0:
                        progress = (processed_pairs / total_pairs) * 100
                        print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {processed_pairs}/{total_pairs} ({progress:.1f}%)")

                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
                    distance = self.get_rostov_distance(
                        client1['lat'], client1['lon'],
                        client2['lat'], client2['lon']
                    )

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                    training_record = {
                        'client1_id': i,
                        'client2_id': j,
                        'client1_lat': client1['lat'],
                        'client1_lon': client1['lon'],
                        'client2_lat': client2['lat'],
                        'client2_lon': client2['lon'],
                        'distance_meters': distance,
                        'client1_vip': client1.get('client_level') == 'VIP',
                        'client2_vip': client2.get('client_level') == 'VIP',
                        'client1_work_start': client1.get('work_start_hour', 8.0),
                        'client1_work_end': client1.get('work_end_hour', 18.0),
                        'client2_work_start': client2.get('work_start_hour', 8.0),
                        'client2_work_end': client2.get('work_end_hour', 18.0)
                    }

                    training_data.append(training_record)
                    processed_pairs += 1

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å rate limit
                    time.sleep(0.1)  # 100ms –∑–∞–¥–µ—Ä–∂–∫–∞

        # 2. –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –†–æ—Å—Ç–æ–≤–µ
        if num_synthetic_clients > 0:
            print(f"üé≤ –°–æ–∑–¥–∞–Ω–∏–µ {num_synthetic_clients} —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
            synthetic_clients = self._generate_synthetic_rostov_clients(num_synthetic_clients)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—ã —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
            for i, client1 in enumerate(synthetic_clients):
                for j, client2 in enumerate(synthetic_clients):
                    if i != j:
                        distance = self.get_rostov_distance(
                            client1['lat'], client1['lon'],
                            client2['lat'], client2['lon']
                        )

                        training_record = {
                            'client1_id': f"synthetic_{i}",
                            'client2_id': f"synthetic_{j}",
                            'client1_lat': client1['lat'],
                            'client1_lon': client1['lon'],
                            'client2_lat': client2['lat'],
                            'client2_lon': client2['lon'],
                            'distance_meters': distance,
                            'client1_vip': client1.get('client_level') == 'VIP',
                            'client2_vip': client2.get('client_level') == 'VIP',
                            'client1_work_start': client1.get('work_start_hour', 8.0),
                            'client1_work_end': client1.get('work_end_hour', 18.0),
                            'client2_work_start': client2.get('work_start_hour', 8.0),
                            'client2_work_end': client2.get('work_end_hour', 18.0)
                        }

                        training_data.append(training_record)

        # 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º NYC –ø–∞—Ç—Ç–µ—Ä–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if use_nyc_patterns and hasattr(self, 'trip_data') and not self.trip_data.empty:
            print("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ NYC –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
            nyc_pairs = self._create_nyc_training_pairs(1000)  # 1000 –ø–∞—Ä –∏–∑ NYC
            training_data.extend(nyc_pairs)

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(training_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        return training_data

    def _generate_synthetic_rostov_clients(self, num_clients: int) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –†–æ—Å—Ç–æ–≤–µ
        """
        clients = []

        # –¶–µ–Ω—Ç—Ä –†–æ—Å—Ç–æ–≤–∞
        center_lat, center_lon = 47.217855, 39.696085

        for i in range(num_clients):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ 10 –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
            lat_offset = np.random.uniform(-0.1, 0.1)  # ~10 –∫–º
            lon_offset = np.random.uniform(-0.1, 0.1)

            client = {
                'lat': center_lat + lat_offset,
                'lon': center_lon + lon_offset,
                'client_level': 'VIP' if np.random.random() < 0.1 else 'regular',  # 10% VIP
                'work_start_hour': np.random.uniform(8.0, 10.0),
                'work_end_hour': np.random.uniform(17.0, 19.0),
                'lunch_start_hour': np.random.uniform(12.0, 14.0),
                'lunch_end_hour': np.random.uniform(13.0, 15.0)
            }
            clients.append(client)

        return clients

    def _create_nyc_training_pairs(self, num_pairs: int) -> List[Dict]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏–∑ NYC –¥–∞–Ω–Ω—ã—Ö
        """
        if not hasattr(self, 'trip_data') or self.trip_data.empty:
            return []

        pairs = []
        trip_data = self.trip_data.sample(n=min(num_pairs * 2, len(self.trip_data)))

        for i in range(0, len(trip_data) - 1, 2):
            if i + 1 < len(trip_data):
                trip1 = trip_data.iloc[i]
                trip2 = trip_data.iloc[i + 1]

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º NYC —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –†–æ—Å—Ç–æ–≤
                distance = trip1.get('trip_distance', 0) * 1609.34 * 0.6  # –º–∏–ª–∏ -> –º–µ—Ç—Ä—ã, –º–∞—Å—à—Ç–∞–±

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –†–æ—Å—Ç–æ–≤–µ
                center_lat, center_lon = 47.217855, 39.696085
                lat1 = center_lat + np.random.uniform(-0.05, 0.05)
                lon1 = center_lon + np.random.uniform(-0.05, 0.05)
                lat2 = center_lat + np.random.uniform(-0.05, 0.05)
                lon2 = center_lon + np.random.uniform(-0.05, 0.05)

                pair = {
                    'client1_id': f"nyc_{i}",
                    'client2_id': f"nyc_{i+1}",
                    'client1_lat': lat1,
                    'client1_lon': lon1,
                    'client2_lat': lat2,
                    'client2_lon': lon2,
                    'distance_meters': distance,
                    'client1_vip': np.random.random() < 0.1,
                    'client2_vip': np.random.random() < 0.1,
                    'client1_work_start': np.random.uniform(8.0, 10.0),
                    'client1_work_end': np.random.uniform(17.0, 19.0),
                    'client2_work_start': np.random.uniform(8.0, 10.0),
                    'client2_work_end': np.random.uniform(17.0, 19.0)
                }
                pairs.append(pair)

        return pairs

    def _load_rostov_clients_from_file(self, file_path: str) -> List[Dict]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ DATA (2).txt
        """
        clients = []

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
            import re
            json_match = re.search(r'data = \[(.*?)\]', content, re.DOTALL)
            if json_match:
                json_str = '[' + json_match.group(1) + ']'

                # –û—á–∏—â–∞–µ–º –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–∏—Ö –∑–∞–ø—è—Ç—ã—Ö
                json_str = re.sub(r'//.*?\n', '', json_str)
                json_str = re.sub(r',\s*]', ']', json_str)
                json_str = re.sub(r',\s*}', '}', json_str)

                import json
                data = json.loads(json_str)

                for item in data:
                    client = {
                        'lat': float(item['lat']),
                        'lon': float(item['lon']),
                        'client_level': item['client_level'],
                        'work_start_hour': float(item['work_start'].split(':')[0]) + float(item['work_start'].split(':')[1])/60,
                        'work_end_hour': float(item['work_end'].split(':')[0]) + float(item['work_end'].split(':')[1])/60,
                        'lunch_start_hour': float(item['lunch_start'].split(':')[0]) + float(item['lunch_start'].split(':')[1])/60,
                        'lunch_end_hour': float(item['lunch_end'].split(':')[0]) + float(item['lunch_end'].split(':')[1])/60
                    }
                    clients.append(client)

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ {file_path}")
            return clients

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
            return []

def main():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
    """
    print("üöÄ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –†–æ—Å—Ç–æ–≤–∞-–Ω–∞-–î–æ–Ω—É")
    print("=" * 50)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å TomTom API
    analyzer = RealDistanceAnalyzer(tomtom_api_key="N0e11R91bFHexBDVlfIzDr7gjLygvdjv")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º NYC –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    trip_data = analyzer.load_nyc_trip_data()
    if trip_data.empty:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–µ–∑–¥–∫–∞—Ö")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∑–æ–Ω
    zone_coords = analyzer.load_zone_geometries()
    if not zone_coords:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∑–æ–Ω")
        return

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ NYC –¥–∞–Ω–Ω—ã—Ö
    analysis = analyzer.analyze_distance_patterns(trip_data)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ DATA (2).txt
    print("\nüë• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ DATA (2).txt:")
    rostov_clients = analyzer._load_rostov_clients_from_file("DATA (2).txt")

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rostov_clients)} —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –í–°–ï–ú–ò —Ä–æ—Å—Ç–æ–≤—Å–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    print(f"\nüèôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å {len(rostov_clients)} —Ä–æ—Å—Ç–æ–≤—Å–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏:")
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

    test_pairs = 0
    for i, client1 in enumerate(rostov_clients):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤
        for j, client2 in enumerate(rostov_clients):
            if i != j:
                distance = analyzer.get_tomtom_distance(
                    client1['lat'], client1['lon'],
                    client2['lat'], client2['lon']
                )
                if distance:
                    print(f"  –ö–ª–∏–µ–Ω—Ç {i+1} ‚Üí –ö–ª–∏–µ–Ω—Ç {j+1}: {distance:.0f} –º–µ—Ç—Ä–æ–≤")
                    test_pairs += 1
                else:
                    print(f"  –ö–ª–∏–µ–Ω—Ç {i+1} ‚Üí –ö–ª–∏–µ–Ω—Ç {j+1}: –û—à–∏–±–∫–∞ API")

    print(f"‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {test_pairs} –ø–∞—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤")

    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –í–°–ï–• NYC –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏–∑ –í–°–ï–• NYC –¥–∞–Ω–Ω—ã—Ö:")
    print(f"üéØ –¶–µ–ª—å: –ø–æ–ª—É—á–∏—Ç—å 10,000+ –ø–∞—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(rostov_clients)} —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ
    # 47 —Ä–µ–∞–ª—å–Ω—ã—Ö + 200 —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö = 247 –∫–ª–∏–µ–Ω—Ç–æ–≤
    # 247 √ó 246 = 60,762 –ø–∞—Ä (–±–æ–ª—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ!)
    training_data = analyzer.create_rostov_training_data(
        clients_data=rostov_clients,
        use_nyc_patterns=True,
        num_synthetic_clients=200  # 200 —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    )

    print(f"\nüìä –°–æ–∑–¥–∞–Ω–æ {len(training_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    return analyzer, training_data

if __name__ == "__main__":
    main()
