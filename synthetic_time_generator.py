#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
"""

import os
import random
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

class SyntheticTimeGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    """

    def __init__(self, seed: int = 42):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        """
        random.seed(seed)
        np.random.seed(seed)
        print("üïí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    def generate_time_windows(self, num_clients: int = 50000):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        """
        print(f"‚è∞ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {num_clients} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω...")

        time_data = []

        for i in range(num_clients):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–¥–≤–∏–≥–∏
            work_start_shift = random.randint(0, 4)  # 0-4 —á–∞—Å–∞
            work_end_shift = random.randint(0, 4)   # 0-4 —á–∞—Å–∞
            lunch_start_shift = random.randint(0, 1) # 0-1 —á–∞—Å
            lunch_end_shift = random.randint(0, 1)   # 0-1 —á–∞—Å

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–∞
            work_start = self._add_hours("08:00", work_start_shift)
            work_end = self._subtract_hours("18:00", work_end_shift)
            lunch_start = self._add_hours("13:00", lunch_start_shift)
            lunch_end = self._add_hours("14:00", lunch_end_shift)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å (work_start < work_end)
            if self._time_to_minutes(work_start) >= self._time_to_minutes(work_end):
                # –ï—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                work_start = "08:00"
                work_end = "18:00"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∞–Ω—á –≤–Ω—É—Ç—Ä–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if (self._time_to_minutes(lunch_start) < self._time_to_minutes(work_start) or
                self._time_to_minutes(lunch_end) > self._time_to_minutes(work_end)):
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ª–∞–Ω—á
                lunch_start = "13:00"
                lunch_end = "14:00"

            time_data.append({
                'work_start_hour': self._time_to_minutes(work_start) / 60.0,  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—ã
                'work_end_hour': self._time_to_minutes(work_end) / 60.0,
                'lunch_start_hour': self._time_to_minutes(lunch_start) / 60.0,
                'lunch_end_hour': self._time_to_minutes(lunch_end) / 60.0
            })

        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(time_data)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω")
        return time_data

    def _add_hours(self, time_str: str, hours: int) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Å—ã –∫ –≤—Ä–µ–º–µ–Ω–∏
        """
        time_obj = datetime.strptime(time_str, "%H:%M")
        new_time = time_obj + timedelta(hours=hours)
        return new_time.strftime("%H:%M")

    def _subtract_hours(self, time_str: str, hours: int) -> str:
        """
        –í—ã—á–∏—Ç–∞–µ—Ç —á–∞—Å—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–∏
        """
        time_obj = datetime.strptime(time_str, "%H:%M")
        new_time = time_obj - timedelta(hours=hours)
        return new_time.strftime("%H:%M")

    def _time_to_minutes(self, time_str: str) -> int:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã
        """
        time_obj = datetime.strptime(time_str, "%H:%M")
        return time_obj.hour * 60 + time_obj.minute

    def combine_with_nyc_data(self, nyc_data_path: str = "DS/taxi_trip_data.csv", output_path: str = "combined_training_data.csv"):
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç NYC –¥–∞–Ω–Ω—ã–µ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        print("üîÑ –û–±—ä–µ–¥–∏–Ω—è–µ–º NYC –¥–∞–Ω–Ω—ã–µ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º NYC –¥–∞–Ω–Ω—ã–µ
        if not os.path.exists(nyc_data_path):
            print(f"‚ùå –§–∞–π–ª NYC –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {nyc_data_path}")
            return None

        print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º NYC –¥–∞–Ω–Ω—ã–µ...")
        nyc_trips = []
        chunk_size = 10000

        try:
            for chunk in pd.read_csv(nyc_data_path, chunksize=chunk_size):
                if len(nyc_trips) >= 50000:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50k
                    break

                for _, row in chunk.iterrows():
                    try:
                        pickup_location = row.get('pickup_location_id', None)
                        dropoff_location = row.get('dropoff_location_id', None)
                        trip_distance = row.get('trip_distance', 0)
                        fare_amount = row.get('fare_amount', 0)

                        if (pd.notna(pickup_location) and pd.notna(dropoff_location) and
                            pickup_location > 0 and dropoff_location > 0):

                            trip = {
                                'latitude': pickup_location / 1000.0,
                                'longitude': dropoff_location / 1000.0,
                                'is_vip': random.choice([True, False]),  # –°–ª—É—á–∞–π–Ω—ã–π VIP —Å—Ç–∞—Ç—É—Å
                                'timestamp': np.random.randint(0, 86400),
                                'distance': float(trip_distance) if pd.notna(trip_distance) else 1.0,
                                'time': np.random.uniform(5, 120),
                                'fare': float(fare_amount) if pd.notna(fare_amount) else 10.0
                            }
                            nyc_trips.append(trip)

                    except Exception as e:
                        continue

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NYC –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(nyc_trips)} NYC –ø–æ–µ–∑–¥–æ–∫")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        time_data = self.generate_time_windows(len(nyc_trips))

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        print("üîó –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
        combined_data = []

        for i, trip in enumerate(nyc_trips):
            time_info = time_data[i]

            combined_record = {
                'latitude': trip['latitude'],
                'longitude': trip['longitude'],
                'is_vip': trip['is_vip'],
                'work_start_hour': time_info['work_start_hour'],
                'work_end_hour': time_info['work_end_hour'],
                'lunch_start_hour': time_info['lunch_start_hour'],
                'lunch_end_hour': time_info['lunch_end_hour']
            }

            combined_data.append(combined_record)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        df = pd.DataFrame(combined_data)
        df.to_csv(output_path, index=False)

        print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")

        return output_path

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    print("üïí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = SyntheticTimeGenerator()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    output_file = generator.combine_with_nyc_data()

    if output_file:
        print(f"\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìÅ –§–∞–π–ª: {output_file}")
        print(f"üìä –ì–æ—Ç–æ–≤ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()
