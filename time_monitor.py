#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‚è∞ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable
from dataclasses import dataclass
from enum import Enum

class TriggerType(Enum):
    """–¢–∏–ø—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    DEPARTURE_REMINDER = "departure_reminder"  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–µ–∑–¥–µ
    LUNCH_BREAK = "lunch_break"                # –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
    DELAY_ALERT = "delay_alert"                # –û–ø–æ–∑–¥–∞–Ω–∏–µ
    TRAFFIC_CHANGE = "traffic_change"          # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
    ROUTE_UPDATE = "route_update"              # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    CLIENT_ARRIVAL = "client_arrival"          # –ü—Ä–∏–±—ã—Ç–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç—É

@dataclass
class TimeTrigger:
    """–¢—Ä–∏–≥–≥–µ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    trigger_type: TriggerType
    trigger_time: datetime
    message: str
    data: Dict
    priority: int = 1  # 1-–≤—ã—Å–æ–∫–∏–π, 2-—Å—Ä–µ–¥–Ω–∏–π, 3-–Ω–∏–∑–∫–∏–π

@dataclass
class UserSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    chat_id: int
    notifications_enabled: bool = True
    departure_reminder_minutes: int = 15
    lunch_reminder_minutes: int = 15
    delay_threshold_minutes: int = 5
    traffic_threshold_minutes: int = 10
    work_start: str = "09:00"
    work_end: str = "18:00"
    lunch_start: str = "13:00"
    lunch_end: str = "14:00"
    timezone: str = "Europe/Moscow"
    language: str = "ru"

class TimeMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self):
        self.triggers: List[TimeTrigger] = []
        self.user_settings: Dict[int, UserSettings] = {}
        self.callbacks: Dict[TriggerType, List[Callable]] = {
            TriggerType.DEPARTURE_REMINDER: [],
            TriggerType.LUNCH_BREAK: [],
            TriggerType.DELAY_ALERT: [],
            TriggerType.TRAFFIC_CHANGE: [],
            TriggerType.ROUTE_UPDATE: [],
            TriggerType.CLIENT_ARRIVAL: []
        }
        self.monitoring = False
        self.monitor_thread = None

    def add_user(self, chat_id: int, settings: UserSettings):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.user_settings[chat_id] = settings
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

    def update_user_settings(self, chat_id: int, **kwargs):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if chat_id in self.user_settings:
            for key, value in kwargs.items():
                if hasattr(self.user_settings[chat_id], key):
                    setattr(self.user_settings[chat_id], key, value)
            print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def register_callback(self, trigger_type: TriggerType, callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç callback –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        self.callbacks[trigger_type].append(callback)
        print(f"üîî Callback –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {trigger_type.value}")

    def add_trigger(self, trigger: TimeTrigger):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –≤ –æ—á–µ—Ä–µ–¥—å"""
        self.triggers.append(trigger)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        self.triggers.sort(key=lambda x: x.trigger_time)
        print(f"‚è∞ –¢—Ä–∏–≥–≥–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {trigger.trigger_type.value} –≤ {trigger.trigger_time.strftime('%H:%M')}")

    def add_departure_reminder(self, chat_id: int, departure_time: datetime, client_info: Dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–µ–∑–¥–µ"""
        if chat_id not in self.user_settings:
            return

        settings = self.user_settings[chat_id]
        if not settings.notifications_enabled:
            return

        reminder_time = departure_time - timedelta(minutes=settings.departure_reminder_minutes)

        trigger = TimeTrigger(
            trigger_type=TriggerType.DEPARTURE_REMINDER,
            trigger_time=reminder_time,
            message=f"‚è∞ –ß–µ—Ä–µ–∑ {settings.departure_reminder_minutes} –º–∏–Ω –≤—ã–µ–∑–∂–∞–π—Ç–µ –∫ –∫–ª–∏–µ–Ω—Ç—É",
            data={
                "chat_id": chat_id,
                "client_info": client_info,
                "departure_time": departure_time
            },
            priority=2
        )

        self.add_trigger(trigger)

    def add_lunch_reminder(self, chat_id: int, lunch_start: datetime):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–±–µ–¥–µ"""
        if chat_id not in self.user_settings:
            return

        settings = self.user_settings[chat_id]
        if not settings.notifications_enabled:
            return

        reminder_time = lunch_start - timedelta(minutes=settings.lunch_reminder_minutes)

        trigger = TimeTrigger(
            trigger_type=TriggerType.LUNCH_BREAK,
            trigger_time=reminder_time,
            message=f"üçΩÔ∏è –í—Ä–µ–º—è –æ–±–µ–¥–∞ —á–µ—Ä–µ–∑ {settings.lunch_reminder_minutes} –º–∏–Ω—É—Ç —Å {settings.lunch_start} –¥–æ {settings.lunch_end}",
            data={
                "chat_id": chat_id,
                "lunch_start": lunch_start,
                "lunch_end": datetime.strptime(settings.lunch_end, "%H:%M").time()
            },
            priority=2
        )

        self.add_trigger(trigger)

    def add_delay_alert(self, chat_id: int, planned_arrival: datetime, current_time: datetime, client_info: Dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏"""
        if chat_id not in self.user_settings:
            return

        settings = self.user_settings[chat_id]
        if not settings.notifications_enabled:
            return

        delay_minutes = int((current_time - planned_arrival).total_seconds() / 60)

        if delay_minutes >= settings.delay_threshold_minutes:
            trigger = TimeTrigger(
                trigger_type=TriggerType.DELAY_ALERT,
                trigger_time=current_time,
                message=f"üö® –í—ã –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç–µ –Ω–∞ {delay_minutes} –º–∏–Ω –∫ –∫–ª–∏–µ–Ω—Ç—É",
                data={
                    "chat_id": chat_id,
                    "client_info": client_info,
                    "delay_minutes": delay_minutes,
                    "planned_arrival": planned_arrival
                },
                priority=1
            )

            self.add_trigger(trigger)

    def add_traffic_change_alert(self, chat_id: int, old_time: int, new_time: int, route_info: Dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        if chat_id not in self.user_settings:
            return

        settings = self.user_settings[chat_id]
        if not settings.notifications_enabled:
            return

        time_increase = new_time - old_time

        if time_increase >= settings.traffic_threshold_minutes:
            trigger = TimeTrigger(
                trigger_type=TriggerType.TRAFFIC_CHANGE,
                trigger_time=datetime.now(),
                message=f"üöó –ü—Ä–æ–±–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ! –í—Ä–µ–º—è —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ {time_increase} –º–∏–Ω",
                data={
                    "chat_id": chat_id,
                    "route_info": route_info,
                    "old_time": old_time,
                    "new_time": new_time,
                    "time_increase": time_increase
                },
                priority=1
            )

            self.add_trigger(trigger)

    def add_route_update_notification(self, chat_id: int, route_info: Dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞"""
        if chat_id not in self.user_settings:
            return

        settings = self.user_settings[chat_id]
        if not settings.notifications_enabled:
            return

        trigger = TimeTrigger(
            trigger_type=TriggerType.ROUTE_UPDATE,
            trigger_time=datetime.now(),
            message="üîÑ –ú–∞—Ä—à—Ä—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è",
            data={
                "chat_id": chat_id,
                "route_info": route_info
            },
            priority=2
        )

        self.add_trigger(trigger)

    def add_client_arrival_notification(self, chat_id: int, client_info: Dict, arrival_time: datetime):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É"""
        if chat_id not in self.user_settings:
            return

        settings = self.user_settings[chat_id]
        if not settings.notifications_enabled:
            return

        trigger = TimeTrigger(
            trigger_type=TriggerType.CLIENT_ARRIVAL,
            trigger_time=arrival_time,
            message=f"üìç –í—ã –ø—Ä–∏–±—ã–ª–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É. –í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {client_info.get('service_time', 20)} –º–∏–Ω",
            data={
                "chat_id": chat_id,
                "client_info": client_info,
                "arrival_time": arrival_time
            },
            priority=2
        )

        self.add_trigger(trigger)

    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏"""
        if self.monitoring:
            return

        self.monitoring = True
        self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.monitor_thread.start()
        print("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—â–µ–Ω")

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏"""
        self.monitoring = False
        if self.monitor_thread:
            self.monitor_thread.join()
        print("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring:
            try:
                current_time = datetime.now()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–æ—Ç–∞—Ç—å
                triggers_to_fire = []
                for trigger in self.triggers[:]:
                    if trigger.trigger_time <= current_time:
                        triggers_to_fire.append(trigger)
                        self.triggers.remove(trigger)

                # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
                for trigger in triggers_to_fire:
                    self._fire_trigger(trigger)

                # –°–ø–∏–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(30)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def _fire_trigger(self, trigger: TimeTrigger):
        """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä"""
        print(f"üîî –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä: {trigger.trigger_type.value}")
        print(f"üì± –°–æ–æ–±—â–µ–Ω–∏–µ: {trigger.message}")

        # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ callbacks
        for callback in self.callbacks[trigger.trigger_type]:
            try:
                callback(trigger)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")

    def get_user_triggers(self, chat_id: int) -> List[TimeTrigger]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return [trigger for trigger in self.triggers
                if trigger.data.get("chat_id") == chat_id]

    def clear_user_triggers(self, chat_id: int):
        """–û—á–∏—â–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.triggers = [trigger for trigger in self.triggers
                        if trigger.data.get("chat_id") != chat_id]
        print(f"üóëÔ∏è –¢—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ—á–∏—â–µ–Ω—ã")

    def get_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            "monitoring": self.monitoring,
            "total_triggers": len(self.triggers),
            "registered_users": len(self.user_settings),
            "next_trigger": self.triggers[0].trigger_time if self.triggers else None
        }

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    print("‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏")
    print("=" * 60)

    monitor = TimeMonitor()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user = UserSettings(
        chat_id=123456789,
        notifications_enabled=True,
        departure_reminder_minutes=15,
        lunch_reminder_minutes=15,
        delay_threshold_minutes=5,
        traffic_threshold_minutes=10
    )
    monitor.add_user(test_user.chat_id, test_user)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def test_callback(trigger: TimeTrigger):
        print(f"üéØ Callback —Å—Ä–∞–±–æ—Ç–∞–ª: {trigger.message}")

    monitor.register_callback(TriggerType.DEPARTURE_REMINDER, test_callback)
    monitor.register_callback(TriggerType.LUNCH_BREAK, test_callback)
    monitor.register_callback(TriggerType.DELAY_ALERT, test_callback)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    now = datetime.now()

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–µ–∑–¥–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
    departure_time = now + timedelta(minutes=1)
    monitor.add_departure_reminder(
        test_user.chat_id,
        departure_time,
        {"id": 1, "address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å"}
    )

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–±–µ–¥–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    lunch_time = now + timedelta(minutes=2)
    monitor.add_lunch_reminder(test_user.chat_id, lunch_time)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.start_monitoring()

    print("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω, –∂–¥–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...")
    print("‚è∞ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n‚è∞ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        monitor.stop_monitoring()
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
