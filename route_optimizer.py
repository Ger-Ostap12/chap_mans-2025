#!/usr/bin/env python3
"""
üöÄ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –¥–Ω—è–º
"""

import pandas as pd
import numpy as np
from typing import List, Dict, Tuple, Optional
from datetime import datetime, timedelta
import json
import time
from dataclasses import dataclass
from enum import Enum

class ClientLevel(Enum):
    VIP = "VIP"
    REGULAR = "–°—Ç–∞–Ω–¥–∞—Ä—Ç"

@dataclass
class Client:
    """–ö–ª–∏–µ–Ω—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    id: int
    address: str
    lat: float
    lon: float
    client_level: ClientLevel
    work_start: str  # "09:00"
    work_end: str    # "18:00"
    lunch_start: str # "13:00"
    lunch_end: str   # "14:00"

    @property
    def service_time_minutes(self) -> int:
        """–í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö"""
        return 30 if self.client_level == ClientLevel.VIP else 20

    @property
    def work_start_hour(self) -> float:
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö (9.0)"""
        hour, minute = map(int, self.work_start.split(':'))
        return hour + minute / 60.0

    @property
    def work_end_hour(self) -> float:
        """–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö (18.0)"""
        hour, minute = map(int, self.work_end.split(':'))
        return hour + minute / 60.0

    @property
    def lunch_start_hour(self) -> float:
        """–ù–∞—á–∞–ª–æ –æ–±–µ–¥–∞ –≤ —á–∞—Å–∞—Ö (13.0)"""
        hour, minute = map(int, self.lunch_start.split(':'))
        return hour + minute / 60.0

    @property
    def lunch_end_hour(self) -> float:
        """–ö–æ–Ω–µ—Ü –æ–±–µ–¥–∞ –≤ —á–∞—Å–∞—Ö (14.0)"""
        hour, minute = map(int, self.lunch_end.split(':'))
        return hour + minute / 60.0

@dataclass
class Route:
    """–ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –¥–µ–Ω—å"""
    day: int
    clients: List[Client]
    total_distance: float
    total_time: float
    estimated_completion: str

class RouteOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –¥–Ω—è–º"""

    def __init__(self, tomtom_api_key: str = None):
        self.tomtom_api_key = tomtom_api_key
        self.clients = []
        self.current_routes = {}  # –¢–µ–∫—É—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
        self.visited_clients = set()  # –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        self.current_time = 9.0  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (9:00)

    def load_clients_from_file(self, file_path: str) -> List[Client]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ DATA (2).txt"""
        clients = []

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
            import re
            json_match = re.search(r'data = \[(.*?)\]', content, re.DOTALL)
            if json_match:
                json_str = '[' + json_match.group(1) + ']'

                # –û—á–∏—â–∞–µ–º –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–∏—Ö –∑–∞–ø—è—Ç—ã—Ö
                json_str = re.sub(r'//.*?\n', '', json_str)
                json_str = re.sub(r',\s*]', ']', json_str)
                json_str = re.sub(r',\s*}', '}', json_str)

                data = json.loads(json_str)

                for item in data:
                    client = Client(
                        id=int(item['id']),
                        address=item['address'],
                        lat=float(item['lat']),
                        lon=float(item['lon']),
                        client_level=ClientLevel.VIP if item['client_level'] == 'VIP' else ClientLevel.REGULAR,
                        work_start=item['work_start'],
                        work_end=item['work_end'],
                        lunch_start=item['lunch_start'],
                        lunch_end=item['lunch_end']
                    )
                    clients.append(client)

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ {file_path}")
            return clients

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
            return []

    def distribute_clients_by_days(self, clients: List[Client], num_days: int) -> List[List[Client]]:
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –¥–Ω—è–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ
        20 –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 3 –¥–Ω—è = 7+7+6 (–Ω–µ 4+4+4+4+4)
        """
        print(f"üìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ {num_days} –¥–Ω–µ–π...")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (VIP —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)
        sorted_clients = sorted(clients, key=lambda c: (
            0 if c.client_level == ClientLevel.VIP else 1,  # VIP —Å–Ω–∞—á–∞–ª–∞
            c.lat, c.lon  # –ü–æ—Ç–æ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        ))

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        base_per_day = len(clients) // num_days
        extra_clients = len(clients) % num_days

        distribution = []
        start_idx = 0

        for day in range(num_days):
            # –ü–µ—Ä–≤—ã–µ –¥–Ω–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ
            clients_this_day = base_per_day + (1 if day < extra_clients else 0)

            day_clients = sorted_clients[start_idx:start_idx + clients_this_day]
            distribution.append(day_clients)

            print(f"  –î–µ–Ω—å {day + 1}: {len(day_clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
            start_idx += clients_this_day

        return distribution

    def calculate_distance(self, client1: Client, client2: Client) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ –¥–ª—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        from math import radians, cos, sin, asin, sqrt

        lat1, lon1 = radians(client1.lat), radians(client1.lon)
        lat2, lon2 = radians(client2.lat), radians(client2.lon)

        dlat = lat2 - lat1
        dlon = lon2 - lon1

        a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
        c = 2 * asin(sqrt(a))

        # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        r = 6371000
        return c * r

    def optimize_route_for_day(self, clients: List[Client], day: int) -> Route:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è"""
        print(f"üó∫Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –¥–Ω—è {day + 1} ({len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤)...")

        if not clients:
            return Route(day=day, clients=[], total_distance=0, total_time=0, estimated_completion="00:00")

        # –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –Ω–∞—á–∏–Ω–∞–µ–º —Å VIP –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ—Ç–æ–º –±–ª–∏–∂–∞–π—à–∏–µ
        optimized_clients = []
        remaining_clients = clients.copy()

        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É (—Ü–µ–Ω—Ç—Ä –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)
        center_lat = sum(c.lat for c in clients) / len(clients)
        center_lon = sum(c.lon for c in clients) / len(clients)

        # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ —Ü–µ–Ω—Ç—Ä—É –∫–ª–∏–µ–Ω—Ç–∞
        start_client = min(clients, key=lambda c:
            ((c.lat - center_lat)**2 + (c.lon - center_lon)**2)**0.5)

        optimized_clients.append(start_client)
        remaining_clients.remove(start_client)

        # –ñ–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: –∫–∞–∂–¥—ã–π —Ä–∞–∑ –≤—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ
        current_client = start_client
        total_distance = 0
        total_time = 0

        while remaining_clients:
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            next_client = min(remaining_clients, key=lambda c:
                self.calculate_distance(current_client, c))

            distance = self.calculate_distance(current_client, next_client)
            service_time = next_client.service_time_minutes

            total_distance += distance
            total_time += service_time + (distance / 1000) * 2  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∫–º

            optimized_clients.append(next_client)
            remaining_clients.remove(next_client)
            current_client = next_client

        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–∞—á–∏–Ω–∞–µ–º –≤ 9:00)
        start_hour = 9.0  # 9:00 —É—Ç—Ä–∞
        estimated_hours = start_hour + (total_time / 60)
        estimated_completion = f"{int(estimated_hours):02d}:{int((estimated_hours % 1) * 60):02d}"

        return Route(
            day=day,
            clients=optimized_clients,
            total_distance=total_distance,
            total_time=total_time,
            estimated_completion=estimated_completion
        )

    def create_alternative_routes(self, clients: List[Client], day: int) -> Tuple[Route, Route]:
        """–°–æ–∑–¥–∞–µ—Ç 2 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –¥–Ω—è {day + 1}...")

        # –ú–∞—Ä—à—Ä—É—Ç 1: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç VIP –∫–ª–∏–µ–Ω—Ç–∞–º
        vip_clients = [c for c in clients if c.client_level == ClientLevel.VIP]
        regular_clients = [c for c in clients if c.client_level == ClientLevel.REGULAR]

        route1_clients = vip_clients + regular_clients
        route1 = self.optimize_route_for_day(route1_clients, day)

        # –ú–∞—Ä—à—Ä—É—Ç 2: –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–±–ª–∏–∂–∞–π—à–∏–µ —Å–æ—Å–µ–¥–∏)
        route2_clients = clients.copy()
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        route2_clients.sort(key=lambda c: (c.lat, c.lon))
        route2 = self.optimize_route_for_day(route2_clients, day)

        return route1, route2

    def plan_multi_day_routes(self, clients: List[Client], num_days: int) -> Dict:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏"""
        print(f"üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞ {num_days} –¥–Ω–µ–π...")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –¥–Ω—è–º
        daily_clients = self.distribute_clients_by_days(clients, num_days)

        result = {
            'total_clients': len(clients),
            'num_days': num_days,
            'distribution': [],
            'routes': []
        }

        for day, day_clients in enumerate(daily_clients):
            print(f"\nüìÖ –î–µ–Ω—å {day + 1}: {len(day_clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")

            # –°–æ–∑–¥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
            route1, route2 = self.create_alternative_routes(day_clients, day)

            day_info = {
                'day': day + 1,
                'num_clients': len(day_clients),
                'route_1': {
                    'clients': [c.id for c in route1.clients],
                    'total_distance': route1.total_distance,
                    'total_time': route1.total_time,
                    'estimated_completion': route1.estimated_completion,
                    'strategy': 'VIP Priority'
                },
                'route_2': {
                    'clients': [c.id for c in route2.clients],
                    'total_distance': route2.total_distance,
                    'total_time': route2.total_time,
                    'estimated_completion': route2.estimated_completion,
                    'strategy': 'Geographic Optimization'
                }
            }

            result['distribution'].append(day_info)
            result['routes'].extend([route1, route2])

        return result

    def mark_client_visited(self, client_id: int, actual_service_time: Optional[float] = None):
        """
        –û—Ç–º–µ—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç
        """
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö
        self.visited_clients.add(client_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        if actual_service_time:
            self.current_time += actual_service_time / 60.0  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å—ã
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            client = next((c for c in self.clients if c.id == client_id), None)
            if client:
                self.current_time += client.service_time_minutes / 60.0

        print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {int(self.current_time):02d}:{int((self.current_time % 1) * 60):02d}")

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∞—Ä—à—Ä—É—Ç—ã
        self.recalculate_remaining_routes()

    def recalculate_remaining_routes(self):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∞—Ä—à—Ä—É—Ç—ã —Å —É—á–µ—Ç–æ–º –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        print("üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–∞—Ä—à—Ä—É—Ç–æ–≤...")

        for day, route in self.current_routes.items():
            # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            remaining_clients = [c for c in route.clients if c.id not in self.visited_clients]

            if remaining_clients:
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤
                new_route = self.optimize_route_for_day(remaining_clients, day)
                self.current_routes[day] = new_route

                print(f"  üìÖ –î–µ–Ω—å {day + 1}: {len(remaining_clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å")
                print(f"    ‚è±Ô∏è –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {new_route.estimated_completion}")
            else:
                print(f"  üìÖ –î–µ–Ω—å {day + 1}: –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ—Å–µ—â–µ–Ω—ã ‚úÖ")

    def check_working_hours(self, client: Client, arrival_time: float) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ—Å–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
        if arrival_time < client.work_start_hour or arrival_time > client.work_end_hour:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if client.lunch_start_hour <= arrival_time <= client.lunch_end_hour:
            return False

        return True

    def find_optimal_visit_time(self, client: Client, current_time: float) -> float:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        """
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å - –ø–æ—Å–µ—â–∞–µ–º
        if self.check_working_hours(client, current_time):
            return current_time

        # –ò–Ω–∞—á–µ –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ–±–µ–¥–∞
        if current_time < client.lunch_end_hour:
            return client.lunch_end_hour

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
        if current_time > client.work_end_hour:
            return client.work_start_hour + 24  # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å

        return current_time

    def get_route_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        status = {
            'current_time': f"{int(self.current_time):02d}:{int((self.current_time % 1) * 60):02d}",
            'visited_clients': list(self.visited_clients),
            'remaining_routes': {}
        }

        for day, route in self.current_routes.items():
            remaining_clients = [c for c in route.clients if c.id not in self.visited_clients]
            status['remaining_routes'][f'day_{day + 1}'] = {
                'remaining_clients': len(remaining_clients),
                'estimated_completion': route.estimated_completion
            }

        return status

    def get_routes_json(self, clients: List[Client], num_days: int, include_waypoints: bool = True) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è API"""
        result = self.plan_multi_day_routes(clients, num_days)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        json_result = {
            'success': True,
            'total_clients': result['total_clients'],
            'num_days': result['num_days'],
            'routes': []
        }

        for day_info in result['distribution']:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ 1
            route1_waypoints = []
            if include_waypoints:
                for client_id in day_info['route_1']['clients']:
                    client = next((c for c in clients if c.id == client_id), None)
                    if client:
                        route1_waypoints.append({
                            'lat': client.lat,
                            'lon': client.lon,
                            'id': client.id,
                            'level': client.client_level.value
                        })

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ 2
            route2_waypoints = []
            if include_waypoints:
                for client_id in day_info['route_2']['clients']:
                    client = next((c for c in clients if c.id == client_id), None)
                    if client:
                        route2_waypoints.append({
                            'lat': client.lat,
                            'lon': client.lon,
                            'id': client.id,
                            'level': client.client_level.value
                        })

            day_routes = {
                'day': day_info['day'],
                'num_clients': day_info['num_clients'],
                'alternatives': [
                    {
                        'id': 1,
                        'strategy': day_info['route_1']['strategy'],
                        'clients': day_info['route_1']['clients'],
                        'waypoints': route1_waypoints,
                        'total_distance_meters': int(day_info['route_1']['total_distance']),
                        'total_time_minutes': int(day_info['route_1']['total_time']),
                        'estimated_completion': day_info['route_1']['estimated_completion']
                    },
                    {
                        'id': 2,
                        'strategy': day_info['route_2']['strategy'],
                        'clients': day_info['route_2']['clients'],
                        'waypoints': route2_waypoints,
                        'total_distance_meters': int(day_info['route_2']['total_distance']),
                        'total_time_minutes': int(day_info['route_2']['total_time']),
                        'estimated_completion': day_info['route_2']['estimated_completion']
                    }
                ]
            }
            json_result['routes'].append(day_routes)

        return json_result

    def get_tomtom_route_json(self, waypoints: List[Dict]) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –æ—Ç TomTom API"""
        if not self.tomtom_api_key:
            return {'error': 'TomTom API key not provided'}

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è TomTom API
            coords_str = ':'.join([f"{wp['lat']},{wp['lon']}" for wp in waypoints])
            url = f"https://api.tomtom.com/routing/1/calculateRoute/{coords_str}/json"

            params = {
                'key': self.tomtom_api_key,
                'routeType': 'fastest',
                'traffic': 'true'
            }

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            session = requests.Session()
            session.verify = False
            session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json',
                'Connection': 'keep-alive'
            })

            response = session.get(url, params=params, timeout=30)

            if response.status_code == 200:
                return response.json()
            else:
                return {'error': f'TomTom API error: {response.status_code}'}

        except Exception as e:
            return {'error': f'TomTom API error: {str(e)}'}

    def mark_visited_json(self, client_id: int, actual_service_time: Optional[float] = None) -> Dict:
        """–û—Ç–º–µ—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ JSON"""
        self.mark_client_visited(client_id, actual_service_time)

        return {
            'success': True,
            'client_id': client_id,
            'status': self.get_route_status()
        }

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤")
    print("=" * 50)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å TomTom API
    optimizer = RouteOptimizer(tomtom_api_key="N0e11R91bFHexBDVlfIzDr7gjLygvdjv")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients = optimizer.load_clients_from_file("DATA (2).txt")
    if not clients:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print(f"üëë VIP –∫–ª–∏–µ–Ω—Ç–æ–≤: {sum(1 for c in clients if c.client_level == ClientLevel.VIP)}")
    print(f"üë§ –û–±—ã—á–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {sum(1 for c in clients if c.client_level == ClientLevel.REGULAR)}")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ 3 –¥–Ω—è
    num_days = 3
    result = optimizer.plan_multi_day_routes(clients, num_days)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞
    optimizer.current_routes = {i: result['routes'][i*2] for i in range(num_days)}
    optimizer.clients = clients

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 50)

    for day_info in result['distribution']:
        print(f"\nüìÖ –î–µ–Ω—å {day_info['day']}: {day_info['num_clients']} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        print(f"  üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç 1 ({day_info['route_1']['strategy']}):")
        print(f"    üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {day_info['route_1']['total_distance']:.0f} –º")
        print(f"    ‚è±Ô∏è –í—Ä–µ–º—è: {day_info['route_1']['total_time']:.0f} –º–∏–Ω")
        print(f"    üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {day_info['route_1']['estimated_completion']}")

        print(f"  üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç 2 ({day_info['route_2']['strategy']}):")
        print(f"    üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {day_info['route_2']['total_distance']:.0f} –º")
        print(f"    ‚è±Ô∏è –í—Ä–µ–º—è: {day_info['route_2']['total_time']:.0f} –º–∏–Ω")
        print(f"    üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {day_info['route_2']['estimated_completion']}")

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞
    print(f"\nüîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–†–ê–°–ß–ï–¢–ê:")
    print("=" * 50)

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    print("\nüìã –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
    status = optimizer.get_route_status()
    print(f"  üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {status['current_time']}")
    print(f"  üë• –ü–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(status['visited_clients'])}")

    # –ü–æ—Å–µ—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    first_client = result['routes'][0].clients[0]
    print(f"\n‚úÖ –ü–æ—Å–µ—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ {first_client.id} ({first_client.client_level.value})")
    optimizer.mark_client_visited(first_client.id, 25)  # 25 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö 20/30

    # –ü–æ—Å–µ—â–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    if len(result['routes'][0].clients) > 1:
        second_client = result['routes'][0].clients[1]
        print(f"\n‚úÖ –ü–æ—Å–µ—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ {second_client.id} ({second_client.client_level.value})")
        optimizer.mark_client_visited(second_client.id, 15)  # 15 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö 20/30

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    print(f"\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
    final_status = optimizer.get_route_status()
    print(f"  üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {final_status['current_time']}")
    print(f"  üë• –ü–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(final_status['visited_clients'])}")

    for day_key, day_status in final_status['remaining_routes'].items():
        print(f"  üìÖ {day_key}: {day_status['remaining_clients']} –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å")

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è JSON API
    print(f"\nüì° –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø JSON API:")
    print("=" * 50)

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    json_routes = optimizer.get_routes_json(clients, num_days, include_waypoints=True)
    print("üìã JSON –º–∞—Ä—à—Ä—É—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:")
    print(json.dumps(json_routes, indent=2, ensure_ascii=False)[:800] + "...")

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è TomTom API –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    print(f"\nüó∫Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø TOMTOM API:")
    print("=" * 50)

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ—á–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    first_route = json_routes['routes'][0]['alternatives'][0]
    test_waypoints = first_route['waypoints'][:3]  # –ü–µ—Ä–≤—ã–µ 3 —Ç–æ—á–∫–∏

    print(f"üìç –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏: {len(test_waypoints)}")
    for i, wp in enumerate(test_waypoints):
        print(f"  {i+1}. ID: {wp['id']}, Lat: {wp['lat']}, Lon: {wp['lon']}, Level: {wp['level']}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –æ—Ç TomTom
    tomtom_result = optimizer.get_tomtom_route_json(test_waypoints)

    if 'error' in tomtom_result:
        print(f"‚ùå TomTom API –æ—à–∏–±–∫–∞: {tomtom_result['error']}")
    else:
        print(f"‚úÖ TomTom API —É—Å–ø–µ—à–Ω–æ:")
        print(f"  üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {tomtom_result['routes'][0]['summary']['lengthInMeters']} –º")
        print(f"  ‚è±Ô∏è –í—Ä–µ–º—è: {tomtom_result['routes'][0]['summary']['travelTimeInSeconds']} —Å–µ–∫")
        print(f"  üö¶ –ü—Ä–æ–±–∫–∏: {tomtom_result['routes'][0]['summary']['trafficDelayInSeconds']} —Å–µ–∫")

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ JSON
    print(f"\n‚úÖ –û—Ç–º–µ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ JSON:")
    mark_result = optimizer.mark_visited_json(35, 25)
    print(json.dumps(mark_result, indent=2, ensure_ascii=False))

    print(f"\n‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    return result

if __name__ == "__main__":
    main()
