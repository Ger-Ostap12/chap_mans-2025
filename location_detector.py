#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìç –ú–æ–¥—É–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import requests
import json
from typing import Dict, Optional, Tuple
from dataclasses import dataclass

@dataclass
class Location:
    """–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    latitude: float
    longitude: float
    address: str
    city: str
    country: str
    accuracy: float  # –¢–æ—á–Ω–æ—Å—Ç—å –≤ –º–µ—Ç—Ä–∞—Ö
    source: str  # GPS, IP, Manual

class LocationDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self):
        self.default_location = Location(
            latitude=47.2225,  # –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É
            longitude=39.7203,
            address="–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É, –†–æ—Å—Å–∏—è",
            city="–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
            country="–†–æ—Å—Å–∏—è",
            accuracy=1000.0,
            source="default"
        )

    def get_location_from_gps(self, lat: float, lon: float) -> Location:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        print(f"üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ GPS: {lat}, {lon}")

        try:
            # –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenStreetMap Nominatim
            url = f"https://nominatim.openstreetmap.org/reverse"
            params = {
                'lat': lat,
                'lon': lon,
                'format': 'json',
                'addressdetails': 1
            }

            response = requests.get(url, params=params, timeout=10)

            if response.status_code == 200:
                data = response.json()

                address_parts = data.get('address', {})
                city = address_parts.get('city', address_parts.get('town', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                country = address_parts.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

                location = Location(
                    latitude=lat,
                    longitude=lon,
                    address=data.get('display_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å'),
                    city=city,
                    country=country,
                    accuracy=10.0,  # GPS —Ç–æ—á–Ω–æ—Å—Ç—å
                    source="GPS"
                )

                print(f"‚úÖ GPS –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location.address}")
                return location
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ GPS –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
                return self._create_location_from_coords(lat, lon, "GPS")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GPS –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
            return self._create_location_from_coords(lat, lon, "GPS")

    def get_location_from_ip(self, ip_address: str = None) -> Location:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP –∞–¥—Ä–µ—Å—É"""
        print(f"üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP: {ip_address or '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'}")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ipapi.co –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP
            if ip_address:
                url = f"https://ipapi.co/{ip_address}/json/"
            else:
                url = "https://ipapi.co/json/"

            response = requests.get(url, timeout=10)

            if response.status_code == 200:
                data = response.json()

                location = Location(
                    latitude=float(data.get('latitude', 47.2225)),
                    longitude=float(data.get('longitude', 39.7203)),
                    address=f"{data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, {data.get('country_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    city=data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    country=data.get('country_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    accuracy=5000.0,  # IP —Ç–æ—á–Ω–æ—Å—Ç—å
                    source="IP"
                )

                print(f"‚úÖ IP –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location.address}")
                return location
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {response.status_code}")
                return self.default_location

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ IP –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
            return self.default_location

    def get_location_from_address(self, address: str) -> Location:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É (–≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
        print(f"üè† –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ –∞–¥—Ä–µ—Å—É: {address}")

        try:
            # –ü—Ä—è–º–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenStreetMap Nominatim
            url = "https://nominatim.openstreetmap.org/search"
            params = {
                'q': address,
                'format': 'json',
                'limit': 1,
                'addressdetails': 1
            }

            response = requests.get(url, params=params, timeout=10)

            if response.status_code == 200:
                data = response.json()

                if data:
                    result = data[0]

                    location = Location(
                        latitude=float(result.get('lat', 47.2225)),
                        longitude=float(result.get('lon', 39.7203)),
                        address=result.get('display_name', address),
                        city=result.get('address', {}).get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        country=result.get('address', {}).get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        accuracy=100.0,  # –ê–¥—Ä–µ—Å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
                        source="Manual"
                    )

                    print(f"‚úÖ –ê–¥—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location.address}")
                    return location
                else:
                    print(f"‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {address}")
                    return self.default_location
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥—Ä–µ—Å–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
                return self.default_location

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥—Ä–µ—Å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
            return self.default_location

    def _create_location_from_coords(self, lat: float, lon: float, source: str) -> Location:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        return Location(
            latitude=lat,
            longitude=lon,
            address=f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}",
            city="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            country="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            accuracy=100.0,
            source=source
        )

    def get_best_location(self, gps_coords: Optional[Tuple[float, float]] = None,
                         ip_address: Optional[str] = None,
                         manual_address: Optional[str] = None) -> Location:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
        print("üìç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...")

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: GPS > Manual > IP > Default
        if gps_coords:
            lat, lon = gps_coords
            return self.get_location_from_gps(lat, lon)

        if manual_address:
            return self.get_location_from_address(manual_address)

        if ip_address:
            return self.get_location_from_ip(ip_address)

        # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ IP –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        try:
            return self.get_location_from_ip()
        except:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return self.default_location

    def validate_location(self, location: Location) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        if not location:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ –¥–ª—è –†–æ—Å—Å–∏–∏)
        if not (40.0 <= location.latitude <= 80.0 and 20.0 <= location.longitude <= 180.0):
            print(f"‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤: {location.latitude}, {location.longitude}")
            return False

        return True

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    print("üìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")
    print("=" * 60)

    detector = LocationDetector()

    # –¢–µ—Å—Ç 1: GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
    gps_location = detector.get_location_from_gps(47.2225, 39.7203)
    print(f"   üìç {gps_location.address}")
    print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {gps_location.accuracy}–º")
    print(f"   üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {gps_location.source}")

    # –¢–µ—Å—Ç 2: IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:")
    ip_location = detector.get_location_from_ip()
    print(f"   üìç {ip_location.address}")
    print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {ip_location.accuracy}–º")
    print(f"   üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {ip_location.source}")

    # –¢–µ—Å—Ç 3: –ê–¥—Ä–µ—Å–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∞–¥—Ä–µ—Å–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    address_location = detector.get_location_from_address("–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É, –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
    print(f"   üìç {address_location.address}")
    print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {address_location.accuracy}–º")
    print(f"   üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {address_location.source}")

    # –¢–µ—Å—Ç 4: –õ—É—á—à–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ª—É—á—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:")
    best_location = detector.get_best_location(
        gps_coords=(47.2225, 39.7203),
        manual_address="–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É"
    )
    print(f"   üìç {best_location.address}")
    print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {best_location.accuracy}–º")
    print(f"   üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {best_location.source}")

    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
