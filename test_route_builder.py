#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
"""

import os
import torch
import numpy as np
import pandas as pd
from torch.utils.data import DataLoader
from train_model import AttentionRouteOptimizer, RouteOptimizationDataset

class RouteBuilder:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    """

    def __init__(self, model_path: str = "best_model.pth"):
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.model = AttentionRouteOptimizer().to(self.device)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        if os.path.exists(model_path):
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ {model_path}...")
            checkpoint = torch.load(model_path, map_location=self.device)
            self.model.load_state_dict(checkpoint)
            self.model.eval()
            print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
            raise FileNotFoundError(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")

    def load_client_data(self, data_file: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        """
        print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ {data_file}...")

        if not os.path.exists(data_file):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_file}")
            return None

        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç
            with open(data_file, 'r', encoding='utf-8') as f:
                content = f.read()

            # –ò—â–µ–º JSON-–ø–æ–¥–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if 'data = [' in content:
                print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω JSON-–ø–æ–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–∞—Ä—Å–∏–º...")
                return self._parse_json_like_data(content)
            else:
                # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ CSV
                if data_file.endswith('.csv'):
                    df = pd.read_csv(data_file)
                elif data_file.endswith('.txt'):
                    # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
                    df = pd.read_csv(data_file, sep='\t')
                    if len(df.columns) == 1:
                        df = pd.read_csv(data_file, sep=',')
                else:
                    print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                    return None

                print(f"üìã –ö–æ–ª–æ–Ω–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: {list(df.columns)}")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(df)}")

                return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def _parse_json_like_data(self, content: str):
        """
        –ü–∞—Ä—Å–∏—Ç JSON-–ø–æ–¥–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        """
        import re
        import json

        try:
            # –ò—â–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
            data_match = re.search(r'data = \[(.*?)\]', content, re.DOTALL)
            if not data_match:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö")
                return None

            data_str = data_match.group(1)

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            objects = []
            current_obj = ""
            brace_count = 0

            for char in data_str:
                if char == '{':
                    brace_count += 1
                elif char == '}':
                    brace_count -= 1

                current_obj += char

                if brace_count == 0 and current_obj.strip():
                    # –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—ä–µ–∫—Ç
                    obj_str = current_obj.strip()
                    if obj_str.startswith('{') and obj_str.endswith('}'):
                        objects.append(obj_str)
                    current_obj = ""

            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(objects)} –∫–ª–∏–µ–Ω—Ç–æ–≤")

            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç
            clients_data = []
            for i, obj_str in enumerate(objects):
                try:
                    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    obj_str = obj_str.strip()
                    if obj_str.endswith(','):
                        obj_str = obj_str[:-1]

                    # –ü–∞—Ä—Å–∏–º JSON
                    client_data = json.loads(obj_str)
                    clients_data.append(client_data)

                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞ {i+1}: {e}")
                    continue

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            df = pd.DataFrame(clients_data)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
            print(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")

            return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON-–ø–æ–¥–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def prepare_client_features(self, df):
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
        """
        print("üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤...")

        clients = []

        for _, row in df.iterrows():
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π)
                lat = float(row.get('lat', row.get('latitude', 0)))
                lon = float(row.get('lon', row.get('longitude', row.get('lng', 0))))

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                client_level = str(row.get('client_level', '–°—Ç–∞–Ω–¥–∞—Ä—Ç'))
                is_vip = client_level == 'VIP'
                priority = 2 if is_vip else 1  # VIP = 2, –æ–±—ã—á–Ω—ã–π = 1

                # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
                name = str(row.get('address1', row.get('address', f"–ö–ª–∏–µ–Ω—Ç {row.get('id', 'Unknown')}")))

                # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                work_start = str(row.get('work_start', '09:00'))
                work_end = str(row.get('work_end', '18:00'))

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ (7 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ–ª—å)
                # [lat, lon, is_vip, work_start_hour, work_end_hour, lunch_start_hour, lunch_end_hour]
                work_start_hour = float(work_start.split(':')[0]) / 24.0  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
                work_end_hour = float(work_end.split(':')[0]) / 24.0
                lunch_start_hour = float(str(row.get('lunch_start', '13:00')).split(':')[0]) / 24.0
                lunch_end_hour = float(str(row.get('lunch_end', '14:00')).split(':')[0]) / 24.0

                client = {
                    'id': int(row.get('id', 0)),
                    'name': name,
                    'address': str(row.get('address', '')),
                    'latitude': lat,
                    'longitude': lon,
                    'is_vip': is_vip,
                    'priority': priority,
                    'client_level': client_level,
                    'work_start': work_start,
                    'work_end': work_end,
                    'features': [lat, lon, float(is_vip), work_start_hour, work_end_hour, lunch_start_hour, lunch_end_hour]
                }

                clients.append(client)

            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                continue

        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return clients

    def build_route(self, clients):
        """
        –°—Ç—Ä–æ–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        """
        if not clients:
            print("‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞")
            return None

        print(f"üó∫Ô∏è  –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤...")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
        features = []
        for client in clients:
            features.append(client['features'])

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä
        features_tensor = torch.tensor(features, dtype=torch.float32).unsqueeze(0).to(self.device)

        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É
        batch_size, seq_len = features_tensor.shape[:2]
        mask = torch.zeros(batch_size, seq_len, dtype=torch.bool, device=self.device)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        with torch.no_grad():
            outputs = self.model(features_tensor, mask)
            route_scores = outputs['route_scores'].cpu().numpy()[0]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º –æ—á–∫–∞–º
        client_scores = list(zip(clients, route_scores))
        client_scores.sort(key=lambda x: x[1], reverse=True)

        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        optimal_route = [client for client, score in client_scores]

        print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω!")
        return optimal_route

    def print_route(self, route):
        """
        –í—ã–≤–æ–¥–∏—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        """
        if not route:
            print("‚ùå –ú–∞—Ä—à—Ä—É—Ç –ø—É—Å—Ç")
            return

        print("\nüó∫Ô∏è  –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –ú–ê–†–®–†–£–¢:")
        print("=" * 80)

        total_distance = 0
        for i, client in enumerate(route, 1):
            vip_status = "üåü VIP" if client['is_vip'] else "üë§ –°—Ç–∞–Ω–¥–∞—Ä—Ç"
            priority = f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {client['priority']}"

            print(f"{i:2d}. ID: {client['id']} - {client['name']}")
            print(f"    üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {client['latitude']:.6f}, {client['longitude']:.6f}")
            print(f"    üè¢ –ê–¥—Ä–µ—Å: {client['address']}")
            print(f"    {vip_status} | {priority}")
            print(f"    ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {client['work_start']} - {client['work_end']}")

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            if i < len(route):
                next_client = route[i]
                distance = self._calculate_distance(
                    client['latitude'], client['longitude'],
                    next_client['latitude'], next_client['longitude']
                )
                total_distance += distance
                print(f"    üìè –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: {distance:.2f} –∫–º")

            print("-" * 80)

        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–†–®–†–£–¢–ê:")
        print(f"   üõ£Ô∏è  –û–±—â–∞—è –¥–ª–∏–Ω–∞: {total_distance:.2f} –∫–º")
        print(f"   üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(route)}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ VIP
        vip_count = sum(1 for client in route if client['is_vip'])
        standard_count = len(route) - vip_count
        print(f"   üåü VIP –∫–ª–∏–µ–Ω—Ç–æ–≤: {vip_count}")
        print(f"   üë§ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö: {standard_count}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–ª–∏–µ–Ω—Ç–∞
        if len(route) > 6:
            print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –¢–û–ß–ö–ò:")
            print(f"   üöÄ –ù–∞—á–∞–ª–æ: {route[0]['name']} ({'VIP' if route[0]['is_vip'] else '–°—Ç–∞–Ω–¥–∞—Ä—Ç'})")
            print(f"   üèÅ –§–∏–Ω–∏—à: {route[-1]['name']} ({'VIP' if route[-1]['is_vip'] else '–°—Ç–∞–Ω–¥–∞—Ä—Ç'})")

        print(f"\n‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç!")

    def _calculate_distance(self, lat1, lon1, lat2, lon2):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
        """
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        return np.sqrt((lat2 - lat1)**2 + (lon2 - lon1)**2) * 111  # –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–º

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
    model_path = "best_model.pth"
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: python train_model.py")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    data_file = "DATA (2).txt"
    if not os.path.exists(data_file):
        print(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_file}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤
        route_builder = RouteBuilder(model_path)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
        df = route_builder.load_client_data(data_file)
        if df is None:
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        clients = route_builder.prepare_client_features(df)
        if not clients:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤")
            return

        # –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç
        route = route_builder.build_route(clients)
        if route is None:
            return

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        route_builder.print_route(route)

        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –≤–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
